
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 05 19:27:16 CST 2014
//----------------------------------------------------

package kickassdb;

import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 05 19:27:16 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\305\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\012" +
    "\000\002\002\007\000\002\002\007\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\051\002" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\006\005\000\002\006\005\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\010\000\002\010\013\000" +
    "\002\010\013\000\002\010\013\000\002\010\013\000\002" +
    "\010\013\000\002\010\013\000\002\010\013\000\002\011" +
    "\005\000\002\011\003\000\002\011\007\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\012\014\000" +
    "\002\012\014\000\002\012\014\000\002\012\014\000\002" +
    "\012\014\000\002\012\014\000\002\013\016\000\002\013" +
    "\016\000\002\013\016\000\002\013\016\000\002\013\016" +
    "\000\002\013\016\000\002\013\016\000\002\014\005\000" +
    "\002\014\002\000\002\014\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\016\010\000\002\016" +
    "\010\000\002\016\006\000\002\016\006\000\002\017\005" +
    "\000\002\017\003\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\020\003\000\002\020\004\000\002" +
    "\020\002\000\002\021\004\000\002\021\003\000\002\021" +
    "\004\000\002\021\003\000\002\021\004\000\002\021\003" +
    "\000\002\021\004\000\002\021\003\000\002\021\004\000" +
    "\002\021\003\000\002\021\004\000\002\021\003\000\002" +
    "\021\004\000\002\021\003\000\002\021\004\000\002\021" +
    "\003\000\002\022\004\000\002\022\003\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\006\000\002\023\006\000\002" +
    "\023\006\000\002\023\006\000\002\023\006\000\002\023" +
    "\006\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\006\000\002\044\004\000" +
    "\002\046\005\000\002\046\002\000\002\045\004\000\002" +
    "\047\005\000\002\047\002\000\002\050\003\000\002\050" +
    "\003\000\002\050\005\000\002\024\010\000\002\024\010" +
    "\000\002\024\010\000\002\025\016\000\002\025\016\000" +
    "\002\025\016\000\002\025\016\000\002\025\016\000\002" +
    "\025\016\000\002\025\016\000\002\025\016\000\002\025" +
    "\016\000\002\025\016\000\002\026\012\000\002\026\012" +
    "\000\002\026\012\000\002\026\012\000\002\026\012\000" +
    "\002\027\006\000\002\027\002\000\002\027\006\000\002" +
    "\027\006\000\002\030\013\000\002\030\013\000\002\030" +
    "\013\000\002\030\013\000\002\030\013\000\002\031\007" +
    "\000\002\031\002\000\002\031\007\000\002\032\004\000" +
    "\002\032\002\000\002\041\005\000\002\041\005\000\002" +
    "\041\005\000\002\041\003\000\002\041\003\000\002\043" +
    "\005\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\033\007\000\002\033\007\000" +
    "\002\033\007\000\002\033\007\000\002\033\007\000\002" +
    "\033\007\000\002\034\007\000\002\034\007\000\002\034" +
    "\007\000\002\034\007\000\002\034\007\000\002\035\004" +
    "\000\002\035\004\000\002\036\006\000\002\036\006\000" +
    "\002\037\005\000\002\037\003\000\002\037\005\000\002" +
    "\037\003\000\002\037\005\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0210\000\010\003\006\004\005\005\007\001\002\000" +
    "\004\002\u0212\001\002\000\006\003\u0208\055\u0207\001\002" +
    "\000\004\055\u0203\001\002\000\006\003\011\055\010\001" +
    "\002\000\012\003\uffb7\006\uffb7\045\014\046\013\001\002" +
    "\000\010\007\uffb7\045\014\046\013\001\002\000\004\007" +
    "\051\001\002\000\006\003\017\055\015\001\002\000\006" +
    "\003\017\055\015\001\002\000\010\003\uffad\040\uffad\050" +
    "\045\001\002\000\006\003\024\040\025\001\002\000\010" +
    "\003\uffac\040\uffac\050\022\001\002\000\004\046\021\001" +
    "\002\000\010\003\uffb8\006\uffb8\007\uffb8\001\002\000\006" +
    "\003\017\055\015\001\002\000\006\003\uffab\040\uffab\001" +
    "\002\000\016\003\uffa7\017\027\020\026\035\uffa7\036\uffa7" +
    "\037\uffa7\001\002\000\016\003\uffa7\017\027\020\026\035" +
    "\uffa7\036\uffa7\037\uffa7\001\002\000\012\003\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\001\002\000\014\003\uffaa\020\040\035" +
    "\uffaa\036\uffaa\037\uffaa\001\002\000\012\003\032\035\035" +
    "\036\034\037\033\001\002\000\010\003\uffb0\046\uffb0\051" +
    "\036\001\002\000\016\003\uffdf\007\uffdf\025\uffdf\046\uffdf" +
    "\050\uffdf\051\uffdf\001\002\000\016\003\uffe0\007\uffe0\025" +
    "\uffe0\046\uffe0\050\uffe0\051\uffe0\001\002\000\016\003\uffe1" +
    "\007\uffe1\025\uffe1\046\uffe1\050\uffe1\051\uffe1\001\002\000" +
    "\016\003\uffe2\007\uffe2\025\uffe2\046\uffe2\050\uffe2\051\uffe2" +
    "\001\002\000\006\003\017\055\015\001\002\000\006\003" +
    "\uffb2\046\uffb2\001\002\000\012\003\uffa8\035\uffa8\036\uffa8" +
    "\037\uffa8\001\002\000\012\003\032\035\035\036\034\037" +
    "\033\001\002\000\010\003\uffaf\046\uffaf\051\043\001\002" +
    "\000\006\003\017\055\015\001\002\000\006\003\uffb1\046" +
    "\uffb1\001\002\000\006\003\017\055\015\001\002\000\006" +
    "\003\uffae\040\uffae\001\002\000\004\003\050\001\002\000" +
    "\010\003\uffb6\006\uffb6\007\uffb6\001\002\000\014\003\062" +
    "\004\053\005\063\010\064\055\061\001\002\000\014\003" +
    "\uffe3\004\053\005\063\010\uffe3\055\061\001\002\000\006" +
    "\003\u01db\055\u01da\001\002\000\014\003\uffe9\004\053\005" +
    "\063\010\uffe9\055\061\001\002\000\014\003\uffe5\004\053" +
    "\005\063\010\uffe5\055\061\001\002\000\014\003\uffe7\004" +
    "\053\005\063\010\uffe7\055\061\001\002\000\014\003\uffeb" +
    "\004\053\005\063\010\uffeb\055\061\001\002\000\006\003" +
    "\u01c6\010\u01c7\001\002\000\010\003\u018c\040\u018d\050\u018b" +
    "\001\002\000\020\012\103\016\073\021\071\022\101\053" +
    "\072\054\106\055\105\001\002\000\006\003\u0153\055\u0152" +
    "\001\002\000\020\012\103\016\073\021\071\022\101\053" +
    "\072\054\106\055\105\001\002\000\004\002\ufffb\001\002" +
    "\000\014\003\uffed\004\053\005\063\010\uffed\055\061\001" +
    "\002\000\006\003\uffee\010\uffee\001\002\000\032\003\uff9d" +
    "\011\uff9d\012\103\014\uff9d\015\uff9d\016\073\021\071\022" +
    "\101\033\uff9d\053\072\054\106\055\105\001\002\000\010" +
    "\003\155\055\146\056\141\001\002\000\006\003\u012d\045" +
    "\u012e\001\002\000\006\003\352\055\351\001\002\000\032" +
    "\003\uff99\011\uff99\012\103\014\uff99\015\uff99\016\073\021" +
    "\071\022\101\033\uff99\053\072\054\106\055\105\001\002" +
    "\000\032\003\uff9f\011\uff9f\012\103\014\uff9f\015\uff9f\016" +
    "\073\021\071\022\101\033\uff9f\053\072\054\106\055\105" +
    "\001\002\000\032\003\uffa3\011\uffa3\012\103\014\uffa3\015" +
    "\uffa3\016\073\021\071\022\101\033\uffa3\053\072\054\106" +
    "\055\105\001\002\000\006\003\344\051\345\001\002\000" +
    "\032\003\uffa1\011\uffa1\012\103\014\uffa1\015\uffa1\016\073" +
    "\021\071\022\101\033\uffa1\053\072\054\106\055\105\001" +
    "\002\000\020\012\103\016\073\021\071\022\101\053\072" +
    "\054\106\055\105\001\002\000\032\003\uffa5\011\uffa5\012" +
    "\103\014\uffa5\015\uffa5\016\073\021\071\022\101\033\uffa5" +
    "\053\072\054\106\055\105\001\002\000\010\003\155\055" +
    "\146\056\141\001\002\000\032\003\uff9b\011\uff9b\012\103" +
    "\014\uff9b\015\uff9b\016\073\021\071\022\101\033\uff9b\053" +
    "\072\054\106\055\105\001\002\000\014\003\150\041\144" +
    "\045\145\055\146\056\141\001\002\000\006\003\123\045" +
    "\124\001\002\000\006\003\112\011\113\001\002\000\032" +
    "\003\uff97\011\uff97\012\103\014\uff97\015\uff97\016\073\021" +
    "\071\022\101\033\uff97\053\072\054\106\055\105\001\002" +
    "\000\014\003\uff98\011\uff98\014\uff98\015\uff98\033\uff98\001" +
    "\002\000\004\055\121\001\002\000\006\003\115\055\114" +
    "\001\002\000\006\003\117\051\120\001\002\000\004\051" +
    "\116\001\002\000\004\002\ufff1\001\002\000\004\002\ufff0" +
    "\001\002\000\004\002\ufff4\001\002\000\004\051\122\001" +
    "\002\000\004\002\ufff2\001\002\000\004\055\136\001\002" +
    "\000\006\003\126\055\125\001\002\000\006\003\131\046" +
    "\132\001\002\000\004\046\127\001\002\000\004\051\130" +
    "\001\002\000\032\003\uff49\011\uff49\012\uff49\014\uff49\015" +
    "\uff49\016\uff49\021\uff49\022\uff49\033\uff49\053\uff49\054\uff49" +
    "\055\uff49\001\002\000\004\051\135\001\002\000\006\003" +
    "\133\051\134\001\002\000\032\003\uff47\011\uff47\012\uff47" +
    "\014\uff47\015\uff47\016\uff47\021\uff47\022\uff47\033\uff47\053" +
    "\uff47\054\uff47\055\uff47\001\002\000\032\003\uff4b\011\uff4b" +
    "\012\uff4b\014\uff4b\015\uff4b\016\uff4b\021\uff4b\022\uff4b\033" +
    "\uff4b\053\uff4b\054\uff4b\055\uff4b\001\002\000\032\003\uff48" +
    "\011\uff48\012\uff48\014\uff48\015\uff48\016\uff48\021\uff48\022" +
    "\uff48\033\uff48\053\uff48\054\uff48\055\uff48\001\002\000\004" +
    "\046\137\001\002\000\004\051\140\001\002\000\032\003" +
    "\uff4a\011\uff4a\012\uff4a\014\uff4a\015\uff4a\016\uff4a\021\uff4a" +
    "\022\uff4a\033\uff4a\053\uff4a\054\uff4a\055\uff4a\001\002\000" +
    "\022\003\uff54\013\uff54\022\uff54\026\uff54\027\uff54\030\uff54" +
    "\042\uff54\051\uff54\001\002\000\004\042\305\001\002\000" +
    "\022\003\uff53\013\uff53\022\uff53\026\uff53\027\uff53\030\uff53" +
    "\042\uff53\051\uff53\001\002\000\020\003\271\031\266\032" +
    "\270\045\166\055\171\056\161\057\264\001\002\000\010" +
    "\003\252\055\250\056\251\001\002\000\024\003\uff55\013" +
    "\uff55\022\uff55\026\uff55\027\uff55\030\uff55\042\uff55\045\145" +
    "\051\uff55\001\002\000\006\003\213\013\214\001\002\000" +
    "\024\003\uff57\013\uff57\031\164\032\170\042\uff52\045\166" +
    "\055\171\056\161\057\162\001\002\000\020\003\uff58\013" +
    "\uff58\022\uff58\026\152\027\154\030\153\051\uff58\001\002" +
    "\000\010\003\155\055\146\056\141\001\002\000\010\003" +
    "\155\055\146\056\141\001\002\000\010\003\155\055\146" +
    "\056\141\001\002\000\014\003\uff57\013\uff57\022\uff57\042" +
    "\uff52\051\uff57\001\002\000\012\003\uff5b\013\uff5b\022\uff5b" +
    "\051\uff5b\001\002\000\012\003\uff59\013\uff59\022\uff59\051" +
    "\uff59\001\002\000\012\003\uff5a\013\uff5a\022\uff5a\051\uff5a" +
    "\001\002\000\014\003\uff7d\043\uff7d\044\uff7d\046\uff7d\051" +
    "\uff7d\001\002\000\004\051\212\001\002\000\004\051\211" +
    "\001\002\000\004\051\210\001\002\000\014\003\uff7f\043" +
    "\uff7f\044\205\046\uff7f\051\uff7f\001\002\000\010\045\166" +
    "\055\175\056\161\001\002\000\004\051\201\001\002\000" +
    "\004\051\200\001\002\000\014\003\uff7e\043\uff7e\044\uff7e" +
    "\045\145\051\uff7e\001\002\000\012\003\uff82\043\174\046" +
    "\uff82\051\uff82\001\002\000\010\003\uff84\046\uff84\051\uff84" +
    "\001\002\000\010\045\166\055\175\056\161\001\002\000" +
    "\014\003\uff7e\043\uff7e\044\uff7e\046\uff7e\051\uff7e\001\002" +
    "\000\012\003\uff82\043\174\046\uff82\051\uff82\001\002\000" +
    "\010\003\uff83\046\uff83\051\uff83\001\002\000\032\003\uff86" +
    "\011\uff86\012\uff86\014\uff86\015\uff86\016\uff86\021\uff86\022" +
    "\uff86\033\uff86\053\uff86\054\uff86\055\uff86\001\002\000\032" +
    "\003\uff93\011\uff93\012\uff93\014\uff93\015\uff93\016\uff93\021" +
    "\uff93\022\uff93\033\uff93\053\uff93\054\uff93\055\uff93\001\002" +
    "\000\004\046\203\001\002\000\014\003\uff7c\043\uff7c\044" +
    "\uff7c\046\uff7c\051\uff7c\001\002\000\012\003\uff81\043\uff81" +
    "\046\uff81\051\uff81\001\002\000\010\045\166\055\175\056" +
    "\161\001\002\000\014\003\uff7f\043\uff7f\044\205\046\uff7f" +
    "\051\uff7f\001\002\000\012\003\uff80\043\uff80\046\uff80\051" +
    "\uff80\001\002\000\032\003\uff89\011\uff89\012\uff89\014\uff89" +
    "\015\uff89\016\uff89\021\uff89\022\uff89\033\uff89\053\uff89\054" +
    "\uff89\055\uff89\001\002\000\032\003\uff90\011\uff90\012\uff90" +
    "\014\uff90\015\uff90\016\uff90\021\uff90\022\uff90\033\uff90\053" +
    "\uff90\054\uff90\055\uff90\001\002\000\032\003\uff8d\011\uff8d" +
    "\012\uff8d\014\uff8d\015\uff8d\016\uff8d\021\uff8d\022\uff8d\033" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\001\002\000\020\012\103" +
    "\016\073\021\071\022\101\053\072\054\106\055\105\001" +
    "\002\000\020\012\103\016\073\021\071\022\101\053\072" +
    "\054\106\055\105\001\002\000\012\003\uff5f\011\uff5f\014" +
    "\uff5f\015\216\001\002\000\010\003\155\055\146\056\141" +
    "\001\002\000\010\003\uff5c\011\uff5c\014\220\001\002\000" +
    "\020\012\103\016\073\021\071\022\101\053\072\054\106" +
    "\055\105\001\002\000\006\003\222\011\223\001\002\000" +
    "\004\012\230\001\002\000\006\003\224\012\225\001\002" +
    "\000\004\051\227\001\002\000\004\003\226\001\002\000" +
    "\032\003\uff61\011\uff61\012\uff61\014\uff61\015\uff61\016\uff61" +
    "\021\uff61\022\uff61\033\uff61\053\uff61\054\uff61\055\uff61\001" +
    "\002\000\032\003\uff62\011\uff62\012\uff62\014\uff62\015\uff62" +
    "\016\uff62\021\uff62\022\uff62\033\uff62\053\uff62\054\uff62\055" +
    "\uff62\001\002\000\004\051\231\001\002\000\032\003\uff63" +
    "\011\uff63\012\uff63\014\uff63\015\uff63\016\uff63\021\uff63\022" +
    "\uff63\033\uff63\053\uff63\054\uff63\055\uff63\001\002\000\006" +
    "\003\uff5d\011\uff5d\001\002\000\006\003\234\013\235\001" +
    "\002\000\020\012\103\016\073\021\071\022\101\053\072" +
    "\054\106\055\105\001\002\000\020\012\103\016\073\021" +
    "\071\022\101\053\072\054\106\055\105\001\002\000\012" +
    "\003\uff5f\011\uff5f\014\uff5f\015\216\001\002\000\010\003" +
    "\uff60\011\uff60\014\uff60\001\002\000\012\003\uff5f\011\uff5f" +
    "\014\uff5f\015\216\001\002\000\010\003\uff5e\011\uff5e\014" +
    "\uff5e\001\002\000\010\011\uff5f\014\uff5f\015\216\001\002" +
    "\000\006\011\uff5c\014\220\001\002\000\004\011\245\001" +
    "\002\000\004\012\246\001\002\000\004\051\247\001\002" +
    "\000\032\003\uff64\011\uff64\012\uff64\014\uff64\015\uff64\016" +
    "\uff64\021\uff64\022\uff64\033\uff64\053\uff64\054\uff64\055\uff64" +
    "\001\002\000\010\003\uff41\046\uff41\050\262\001\002\000" +
    "\010\003\uff3d\046\uff3d\050\260\001\002\000\010\003\uff3f" +
    "\046\uff3f\050\256\001\002\000\006\003\255\046\254\001" +
    "\002\000\022\003\uff44\013\uff44\022\uff44\026\uff44\027\uff44" +
    "\030\uff44\042\uff44\051\uff44\001\002\000\022\003\uff43\013" +
    "\uff43\022\uff43\026\uff43\027\uff43\030\uff43\042\uff43\051\uff43" +
    "\001\002\000\010\003\252\055\250\056\251\001\002\000" +
    "\006\003\uff40\046\uff40\001\002\000\010\003\252\055\250" +
    "\056\251\001\002\000\006\003\uff3e\046\uff3e\001\002\000" +
    "\010\003\252\055\250\056\251\001\002\000\006\003\uff42" +
    "\046\uff42\001\002\000\006\003\303\051\304\001\002\000" +
    "\006\003\301\051\302\001\002\000\006\003\277\051\300" +
    "\001\002\000\006\003\275\051\276\001\002\000\006\003" +
    "\273\051\274\001\002\000\004\051\272\001\002\000\032" +
    "\003\uff8c\011\uff8c\012\uff8c\014\uff8c\015\uff8c\016\uff8c\021" +
    "\uff8c\022\uff8c\033\uff8c\053\uff8c\054\uff8c\055\uff8c\001\002" +
    "\000\032\003\uff85\011\uff85\012\uff85\014\uff85\015\uff85\016" +
    "\uff85\021\uff85\022\uff85\033\uff85\053\uff85\054\uff85\055\uff85" +
    "\001\002\000\032\003\uff87\011\uff87\012\uff87\014\uff87\015" +
    "\uff87\016\uff87\021\uff87\022\uff87\033\uff87\053\uff87\054\uff87" +
    "\055\uff87\001\002\000\032\003\uff92\011\uff92\012\uff92\014" +
    "\uff92\015\uff92\016\uff92\021\uff92\022\uff92\033\uff92\053\uff92" +
    "\054\uff92\055\uff92\001\002\000\032\003\uff94\011\uff94\012" +
    "\uff94\014\uff94\015\uff94\016\uff94\021\uff94\022\uff94\033\uff94" +
    "\053\uff94\054\uff94\055\uff94\001\002\000\032\003\uff88\011" +
    "\uff88\012\uff88\014\uff88\015\uff88\016\uff88\021\uff88\022\uff88" +
    "\033\uff88\053\uff88\054\uff88\055\uff88\001\002\000\032\003" +
    "\uff8a\011\uff8a\012\uff8a\014\uff8a\015\uff8a\016\uff8a\021\uff8a" +
    "\022\uff8a\033\uff8a\053\uff8a\054\uff8a\055\uff8a\001\002\000" +
    "\032\003\uff8f\011\uff8f\012\uff8f\014\uff8f\015\uff8f\016\uff8f" +
    "\021\uff8f\022\uff8f\033\uff8f\053\uff8f\054\uff8f\055\uff8f\001" +
    "\002\000\032\003\uff91\011\uff91\012\uff91\014\uff91\015\uff91" +
    "\016\uff91\021\uff91\022\uff91\033\uff91\053\uff91\054\uff91\055" +
    "\uff91\001\002\000\032\003\uff8b\011\uff8b\012\uff8b\014\uff8b" +
    "\015\uff8b\016\uff8b\021\uff8b\022\uff8b\033\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\001\002\000\032\003\uff8e\011\uff8e\012\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\021\uff8e\022\uff8e\033\uff8e\053" +
    "\uff8e\054\uff8e\055\uff8e\001\002\000\010\003\306\055\146" +
    "\056\141\001\002\000\020\003\uff52\013\uff52\022\uff52\026" +
    "\uff52\027\uff52\030\uff52\051\uff52\001\002\000\020\003\uff56" +
    "\013\uff56\022\uff56\026\uff56\027\uff56\030\uff56\051\uff56\001" +
    "\002\000\014\003\uff9c\011\uff9c\014\uff9c\015\uff9c\033\uff9c" +
    "\001\002\000\004\013\312\001\002\000\020\012\103\016" +
    "\073\021\071\022\101\053\072\054\106\055\105\001\002" +
    "\000\010\011\uff5f\014\uff5f\015\216\001\002\000\006\011" +
    "\uff5c\014\220\001\002\000\004\011\316\001\002\000\004" +
    "\012\317\001\002\000\004\051\320\001\002\000\032\003" +
    "\uff65\011\uff65\012\uff65\014\uff65\015\uff65\016\uff65\021\uff65" +
    "\022\uff65\033\uff65\053\uff65\054\uff65\055\uff65\001\002\000" +
    "\014\003\uffa6\011\uffa6\014\uffa6\015\uffa6\033\uffa6\001\002" +
    "\000\010\003\uff68\011\uff68\033\324\001\002\000\006\003" +
    "\334\011\335\001\002\000\006\003\325\034\326\001\002" +
    "\000\010\003\155\055\146\056\141\001\002\000\010\003" +
    "\155\055\146\056\141\001\002\000\006\003\330\051\331" +
    "\001\002\000\006\003\uff66\011\uff66\001\002\000\006\003" +
    "\uff69\011\uff69\001\002\000\004\051\333\001\002\000\006" +
    "\003\uff67\011\uff67\001\002\000\004\022\341\001\002\000" +
    "\004\022\336\001\002\000\006\003\337\051\340\001\002" +
    "\000\032\003\uff79\011\uff79\012\uff79\014\uff79\015\uff79\016" +
    "\uff79\021\uff79\022\uff79\033\uff79\053\uff79\054\uff79\055\uff79" +
    "\001\002\000\032\003\uff7b\011\uff7b\012\uff7b\014\uff7b\015" +
    "\uff7b\016\uff7b\021\uff7b\022\uff7b\033\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\001\002\000\004\051\342\001\002\000\032\003" +
    "\uff7a\011\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\021\uff7a" +
    "\022\uff7a\033\uff7a\053\uff7a\054\uff7a\055\uff7a\001\002\000" +
    "\014\003\uffa2\011\uffa2\014\uffa2\015\uffa2\033\uffa2\001\002" +
    "\000\032\003\uff45\011\uff45\012\uff45\014\uff45\015\uff45\016" +
    "\uff45\021\uff45\022\uff45\033\uff45\053\uff45\054\uff45\055\uff45" +
    "\001\002\000\032\003\uff46\011\uff46\012\uff46\014\uff46\015" +
    "\uff46\016\uff46\021\uff46\022\uff46\033\uff46\053\uff46\054\uff46" +
    "\055\uff46\001\002\000\014\003\uffa4\011\uffa4\014\uffa4\015" +
    "\uffa4\033\uffa4\001\002\000\014\003\uffa0\011\uffa0\014\uffa0" +
    "\015\uffa0\033\uffa0\001\002\000\014\003\uff9a\011\uff9a\014" +
    "\uff9a\015\uff9a\033\uff9a\001\002\000\006\003\366\017\365" +
    "\001\002\000\004\017\353\001\002\000\004\056\354\001" +
    "\002\000\004\047\355\001\002\000\004\056\356\001\002" +
    "\000\004\022\357\001\002\000\020\012\103\016\073\021" +
    "\071\022\101\053\072\054\106\055\105\001\002\000\006" +
    "\011\uff68\033\324\001\002\000\004\011\362\001\002\000" +
    "\004\022\363\001\002\000\004\051\364\001\002\000\032" +
    "\003\uff77\011\uff77\012\uff77\014\uff77\015\uff77\016\uff77\021" +
    "\uff77\022\uff77\033\uff77\053\uff77\054\uff77\055\uff77\001\002" +
    "\000\006\003\u0101\056\u0100\001\002\000\004\056\367\001" +
    "\002\000\004\047\370\001\002\000\004\056\371\001\002" +
    "\000\004\022\372\001\002\000\020\012\103\016\073\021" +
    "\071\022\101\053\072\054\106\055\105\001\002\000\006" +
    "\011\uff68\033\324\001\002\000\004\011\375\001\002\000" +
    "\004\022\376\001\002\000\004\051\377\001\002\000\032" +
    "\003\uff76\011\uff76\012\uff76\014\uff76\015\uff76\016\uff76\021" +
    "\uff76\022\uff76\033\uff76\053\uff76\054\uff76\055\uff76\001\002" +
    "\000\006\003\u010a\047\u010b\001\002\000\004\047\u0102\001" +
    "\002\000\004\056\u0103\001\002\000\004\022\u0104\001\002" +
    "\000\020\012\103\016\073\021\071\022\101\053\072\054" +
    "\106\055\105\001\002\000\006\011\uff68\033\324\001\002" +
    "\000\004\011\u0107\001\002\000\004\022\u0108\001\002\000" +
    "\004\051\u0109\001\002\000\032\003\uff75\011\uff75\012\uff75" +
    "\014\uff75\015\uff75\016\uff75\021\uff75\022\uff75\033\uff75\053" +
    "\uff75\054\uff75\055\uff75\001\002\000\004\056\u0126\001\002" +
    "\000\006\003\u010d\056\u010c\001\002\000\006\003\u0114\022" +
    "\u0115\001\002\000\004\022\u010e\001\002\000\020\012\103" +
    "\016\073\021\071\022\101\053\072\054\106\055\105\001" +
    "\002\000\006\011\uff68\033\324\001\002\000\004\011\u0111" +
    "\001\002\000\004\022\u0112\001\002\000\004\051\u0113\001" +
    "\002\000\032\003\uff73\011\uff73\012\uff73\014\uff73\015\uff73" +
    "\016\uff73\021\uff73\022\uff73\033\uff73\053\uff73\054\uff73\055" +
    "\uff73\001\002\000\020\012\103\016\073\021\071\022\101" +
    "\053\072\054\106\055\105\001\002\000\020\012\103\016" +
    "\073\021\071\022\101\053\072\054\106\055\105\001\002" +
    "\000\010\003\uff68\011\uff68\033\324\001\002\000\006\003" +
    "\u0118\011\u0119\001\002\000\004\022\u011f\001\002\000\006" +
    "\003\u011a\022\u011b\001\002\000\004\051\u011e\001\002\000" +
    "\006\003\u011c\051\u011d\001\002\000\032\003\uff6f\011\uff6f" +
    "\012\uff6f\014\uff6f\015\uff6f\016\uff6f\021\uff6f\022\uff6f\033" +
    "\uff6f\053\uff6f\054\uff6f\055\uff6f\001\002\000\032\003\uff78" +
    "\011\uff78\012\uff78\014\uff78\015\uff78\016\uff78\021\uff78\022" +
    "\uff78\033\uff78\053\uff78\054\uff78\055\uff78\001\002\000\032" +
    "\003\uff70\011\uff70\012\uff70\014\uff70\015\uff70\016\uff70\021" +
    "\uff70\022\uff70\033\uff70\053\uff70\054\uff70\055\uff70\001\002" +
    "\000\004\051\u0120\001\002\000\032\003\uff71\011\uff71\012" +
    "\uff71\014\uff71\015\uff71\016\uff71\021\uff71\022\uff71\033\uff71" +
    "\053\uff71\054\uff71\055\uff71\001\002\000\006\011\uff68\033" +
    "\324\001\002\000\004\011\u0123\001\002\000\004\022\u0124" +
    "\001\002\000\004\051\u0125\001\002\000\032\003\uff72\011" +
    "\uff72\012\uff72\014\uff72\015\uff72\016\uff72\021\uff72\022\uff72" +
    "\033\uff72\053\uff72\054\uff72\055\uff72\001\002\000\004\022" +
    "\u0127\001\002\000\020\012\103\016\073\021\071\022\101" +
    "\053\072\054\106\055\105\001\002\000\006\011\uff68\033" +
    "\324\001\002\000\004\011\u012a\001\002\000\004\022\u012b" +
    "\001\002\000\004\051\u012c\001\002\000\032\003\uff74\011" +
    "\uff74\012\uff74\014\uff74\015\uff74\016\uff74\021\uff74\022\uff74" +
    "\033\uff74\053\uff74\054\uff74\055\uff74\001\002\000\004\056" +
    "\u013b\001\002\000\010\003\u0130\056\u012f\057\u0131\001\002" +
    "\000\006\003\u0137\046\u0136\001\002\000\004\046\u0134\001" +
    "\002\000\004\046\u0132\001\002\000\004\051\u0133\001\002" +
    "\000\032\003\uff50\011\uff50\012\uff50\014\uff50\015\uff50\016" +
    "\uff50\021\uff50\022\uff50\033\uff50\053\uff50\054\uff50\055\uff50" +
    "\001\002\000\004\051\u0135\001\002\000\032\003\uff4e\011" +
    "\uff4e\012\uff4e\014\uff4e\015\uff4e\016\uff4e\021\uff4e\022\uff4e" +
    "\033\uff4e\053\uff4e\054\uff4e\055\uff4e\001\002\000\006\003" +
    "\u0139\051\u013a\001\002\000\004\051\u0138\001\002\000\032" +
    "\003\uff4d\011\uff4d\012\uff4d\014\uff4d\015\uff4d\016\uff4d\021" +
    "\uff4d\022\uff4d\033\uff4d\053\uff4d\054\uff4d\055\uff4d\001\002" +
    "\000\032\003\uff4c\011\uff4c\012\uff4c\014\uff4c\015\uff4c\016" +
    "\uff4c\021\uff4c\022\uff4c\033\uff4c\053\uff4c\054\uff4c\055\uff4c" +
    "\001\002\000\032\003\uff51\011\uff51\012\uff51\014\uff51\015" +
    "\uff51\016\uff51\021\uff51\022\uff51\033\uff51\053\uff51\054\uff51" +
    "\055\uff51\001\002\000\004\046\u013c\001\002\000\004\051" +
    "\u013d\001\002\000\032\003\uff4f\011\uff4f\012\uff4f\014\uff4f" +
    "\015\uff4f\016\uff4f\021\uff4f\022\uff4f\033\uff4f\053\uff4f\054" +
    "\uff4f\055\uff4f\001\002\000\006\003\u013f\022\u0140\001\002" +
    "\000\020\012\103\016\073\021\071\022\101\053\072\054" +
    "\106\055\105\001\002\000\020\012\103\016\073\021\071" +
    "\022\101\053\072\054\106\055\105\001\002\000\010\003" +
    "\uff68\011\uff68\033\324\001\002\000\006\003\u0143\011\u0144" +
    "\001\002\000\004\022\u014a\001\002\000\006\003\u0145\022" +
    "\u0146\001\002\000\004\051\u0149\001\002\000\006\003\u0147" +
    "\051\u0148\001\002\000\032\003\uff6a\011\uff6a\012\uff6a\014" +
    "\uff6a\015\uff6a\016\uff6a\021\uff6a\022\uff6a\033\uff6a\053\uff6a" +
    "\054\uff6a\055\uff6a\001\002\000\032\003\uff6e\011\uff6e\012" +
    "\uff6e\014\uff6e\015\uff6e\016\uff6e\021\uff6e\022\uff6e\033\uff6e" +
    "\053\uff6e\054\uff6e\055\uff6e\001\002\000\032\003\uff6b\011" +
    "\uff6b\012\uff6b\014\uff6b\015\uff6b\016\uff6b\021\uff6b\022\uff6b" +
    "\033\uff6b\053\uff6b\054\uff6b\055\uff6b\001\002\000\004\051" +
    "\u014b\001\002\000\032\003\uff6c\011\uff6c\012\uff6c\014\uff6c" +
    "\015\uff6c\016\uff6c\021\uff6c\022\uff6c\033\uff6c\053\uff6c\054" +
    "\uff6c\055\uff6c\001\002\000\006\011\uff68\033\324\001\002" +
    "\000\004\011\u014e\001\002\000\004\022\u014f\001\002\000" +
    "\004\051\u0150\001\002\000\032\003\uff6d\011\uff6d\012\uff6d" +
    "\014\uff6d\015\uff6d\016\uff6d\021\uff6d\022\uff6d\033\uff6d\053" +
    "\uff6d\054\uff6d\055\uff6d\001\002\000\014\003\uff9e\011\uff9e" +
    "\014\uff9e\015\uff9e\033\uff9e\001\002\000\006\003\u0154\045" +
    "\u0156\001\002\000\006\003\u0154\045\u0156\001\002\000\006" +
    "\003\017\055\015\001\002\000\004\006\u015a\001\002\000" +
    "\006\003\017\055\015\001\002\000\006\003\u0158\046\u0159" +
    "\001\002\000\012\003\uffb3\006\uffb3\007\uffb3\051\uffb3\001" +
    "\002\000\012\003\uffb5\006\uffb5\007\uffb5\051\uffb5\001\002" +
    "\000\012\003\032\035\035\036\034\037\033\001\002\000" +
    "\006\007\u015c\051\u015d\001\002\000\010\004\053\005\063" +
    "\055\061\001\002\000\014\003\uffd5\004\uffd5\005\uffd5\010" +
    "\uffd5\055\uffd5\001\002\000\004\010\u015f\001\002\000\020" +
    "\012\103\016\073\021\071\022\101\053\072\054\106\055" +
    "\105\001\002\000\004\011\u0161\001\002\000\004\055\u0162" +
    "\001\002\000\004\051\u0163\001\002\000\014\003\uffbe\004" +
    "\uffbe\005\uffbe\010\uffbe\055\uffbe\001\002\000\004\046\u0165" +
    "\001\002\000\012\003\uffb4\006\uffb4\007\uffb4\051\uffb4\001" +
    "\002\000\006\003\u0167\006\u0168\001\002\000\012\003\032" +
    "\035\035\036\034\037\033\001\002\000\012\003\032\035" +
    "\035\036\034\037\033\001\002\000\010\003\u016a\007\u016b" +
    "\051\u016c\001\002\000\014\003\uffd3\004\uffd3\005\uffd3\010" +
    "\uffd3\055\uffd3\001\002\000\010\004\053\005\063\055\061" +
    "\001\002\000\014\003\uffd6\004\uffd6\005\uffd6\010\uffd6\055" +
    "\uffd6\001\002\000\006\003\u016e\010\u016f\001\002\000\020" +
    "\012\103\016\073\021\071\022\101\053\072\054\106\055" +
    "\105\001\002\000\020\012\103\016\073\021\071\022\101" +
    "\053\072\054\106\055\105\001\002\000\006\003\u0171\011" +
    "\u0172\001\002\000\004\055\u0178\001\002\000\006\003\u0174" +
    "\055\u0173\001\002\000\006\003\u0176\051\u0177\001\002\000" +
    "\004\051\u0175\001\002\000\014\003\uffba\004\uffba\005\uffba" +
    "\010\uffba\055\uffba\001\002\000\014\003\uffb9\004\uffb9\005" +
    "\uffb9\010\uffb9\055\uffb9\001\002\000\014\003\uffbf\004\uffbf" +
    "\005\uffbf\010\uffbf\055\uffbf\001\002\000\004\051\u0179\001" +
    "\002\000\014\003\uffbb\004\uffbb\005\uffbb\010\uffbb\055\uffbb" +
    "\001\002\000\004\011\u017b\001\002\000\004\055\u017c\001" +
    "\002\000\004\051\u017d\001\002\000\014\003\uffbc\004\uffbc" +
    "\005\uffbc\010\uffbc\055\uffbc\001\002\000\006\007\u017f\051" +
    "\u0180\001\002\000\010\004\053\005\063\055\061\001\002" +
    "\000\014\003\uffd4\004\uffd4\005\uffd4\010\uffd4\055\uffd4\001" +
    "\002\000\004\010\u0182\001\002\000\020\012\103\016\073" +
    "\021\071\022\101\053\072\054\106\055\105\001\002\000" +
    "\004\011\u0184\001\002\000\004\055\u0185\001\002\000\004" +
    "\051\u0186\001\002\000\014\003\uffbd\004\uffbd\005\uffbd\010" +
    "\uffbd\055\uffbd\001\002\000\004\011\u0188\001\002\000\004" +
    "\055\u0189\001\002\000\004\051\u018a\001\002\000\004\002" +
    "\ufff3\001\002\000\004\055\u01b8\001\002\000\016\003\032" +
    "\023\u01bb\035\035\036\034\037\033\055\u01b8\001\002\000" +
    "\014\003\u018f\023\u0190\035\035\036\034\037\033\001\002" +
    "\000\006\003\u01b6\051\u01b7\001\002\000\010\003\uffdf\045" +
    "\u01b0\051\uffdf\001\002\000\006\003\u0191\045\u0192\001\002" +
    "\000\014\003\032\035\035\036\034\037\033\056\u0193\001" +
    "\002\000\014\003\032\035\035\036\034\037\033\056\u0193" +
    "\001\002\000\004\047\u01a7\001\002\000\012\003\uffca\025" +
    "\u01a3\046\uffca\050\u01a2\001\002\000\006\003\u0196\046\u0197" +
    "\001\002\000\004\024\u019f\001\002\000\006\003\u0198\024" +
    "\u0199\001\002\000\012\003\032\035\035\036\034\037\033" +
    "\001\002\000\012\003\032\035\035\036\034\037\033\001" +
    "\002\000\006\003\u019b\051\u019c\001\002\000\014\003\uffcc" +
    "\004\uffcc\005\uffcc\010\uffcc\055\uffcc\001\002\000\014\003" +
    "\uffd2\004\uffd2\005\uffd2\010\uffd2\055\uffd2\001\002\000\004" +
    "\051\u019e\001\002\000\014\003\uffcd\004\uffcd\005\uffcd\010" +
    "\uffcd\055\uffcd\001\002\000\012\003\032\035\035\036\034" +
    "\037\033\001\002\000\004\051\u01a1\001\002\000\014\003" +
    "\uffce\004\uffce\005\uffce\010\uffce\055\uffce\001\002\000\014" +
    "\003\032\035\035\036\034\037\033\056\u0193\001\002\000" +
    "\006\003\u01a4\052\u01a5\001\002\000\006\003\uffc6\046\uffc6" +
    "\001\002\000\006\003\uffc7\046\uffc7\001\002\000\006\003" +
    "\uffcb\046\uffcb\001\002\000\004\056\u01a8\001\002\000\010" +
    "\003\uffc8\046\uffc8\050\u01a9\001\002\000\014\003\032\035" +
    "\035\036\034\037\033\056\u0193\001\002\000\006\003\uffc9" +
    "\046\uffc9\001\002\000\004\046\u01ac\001\002\000\004\024" +
    "\u01ad\001\002\000\012\003\032\035\035\036\034\037\033" +
    "\001\002\000\004\051\u01af\001\002\000\014\003\uffcf\004" +
    "\uffcf\005\uffcf\010\uffcf\055\uffcf\001\002\000\014\003\032" +
    "\035\035\036\034\037\033\056\u0193\001\002\000\004\046" +
    "\u01b2\001\002\000\004\024\u01b3\001\002\000\012\003\032" +
    "\035\035\036\034\037\033\001\002\000\004\051\u01b5\001" +
    "\002\000\014\003\uffd0\004\uffd0\005\uffd0\010\uffd0\055\uffd0" +
    "\001\002\000\014\003\uffd7\004\uffd7\005\uffd7\010\uffd7\055" +
    "\uffd7\001\002\000\014\003\uffd9\004\uffd9\005\uffd9\010\uffd9" +
    "\055\uffd9\001\002\000\010\003\u01c3\040\u01c4\050\u018b\001" +
    "\002\000\004\051\u01c2\001\002\000\014\003\uffda\004\uffda" +
    "\005\uffda\010\uffda\055\uffda\001\002\000\004\045\u01bc\001" +
    "\002\000\014\003\032\035\035\036\034\037\033\056\u0193" +
    "\001\002\000\004\046\u01be\001\002\000\004\024\u01bf\001" +
    "\002\000\012\003\032\035\035\036\034\037\033\001\002" +
    "\000\004\051\u01c1\001\002\000\014\003\uffd1\004\uffd1\005" +
    "\uffd1\010\uffd1\055\uffd1\001\002\000\014\003\uffd8\004\uffd8" +
    "\005\uffd8\010\uffd8\055\uffd8\001\002\000\014\003\032\035" +
    "\035\036\034\037\033\055\u01b8\001\002\000\012\003\032" +
    "\035\035\036\034\037\033\001\002\000\014\003\uffdb\004" +
    "\uffdb\005\uffdb\010\uffdb\055\uffdb\001\002\000\020\012\103" +
    "\016\073\021\071\022\101\053\072\054\106\055\105\001" +
    "\002\000\020\012\103\016\073\021\071\022\101\053\072" +
    "\054\106\055\105\001\002\000\006\003\u01c9\011\u01ca\001" +
    "\002\000\004\055\u01d0\001\002\000\006\003\u01cc\055\u01cb" +
    "\001\002\000\006\003\u01ce\051\u01cf\001\002\000\004\051" +
    "\u01cd\001\002\000\004\002\ufff6\001\002\000\004\002\ufff5" +
    "\001\002\000\004\002\ufff9\001\002\000\004\051\u01d1\001" +
    "\002\000\004\002\ufff7\001\002\000\004\011\u01d3\001\002" +
    "\000\004\055\u01d4\001\002\000\004\051\u01d5\001\002\000" +
    "\004\002\ufff8\001\002\000\006\003\uffec\010\uffec\001\002" +
    "\000\006\003\uffe8\010\uffe8\001\002\000\006\003\uffe6\010" +
    "\uffe6\001\002\000\006\003\uffea\010\uffea\001\002\000\006" +
    "\003\u0154\045\u0156\001\002\000\006\003\u0154\045\u0156\001" +
    "\002\000\006\007\u01dd\051\u01de\001\002\000\010\004\053" +
    "\005\063\055\061\001\002\000\014\003\uffdd\004\uffdd\005" +
    "\uffdd\010\uffdd\055\uffdd\001\002\000\004\010\u01e0\001\002" +
    "\000\020\012\103\016\073\021\071\022\101\053\072\054" +
    "\106\055\105\001\002\000\004\011\u01e2\001\002\000\004" +
    "\055\u01e3\001\002\000\004\051\u01e4\001\002\000\014\003" +
    "\uffc4\004\uffc4\005\uffc4\010\uffc4\055\uffc4\001\002\000\010" +
    "\003\u01e6\007\u01e7\051\u01e8\001\002\000\014\003\uffdc\004" +
    "\uffdc\005\uffdc\010\uffdc\055\uffdc\001\002\000\010\004\053" +
    "\005\063\055\061\001\002\000\014\003\uffde\004\uffde\005" +
    "\uffde\010\uffde\055\uffde\001\002\000\006\003\u01ea\010\u01eb" +
    "\001\002\000\020\012\103\016\073\021\071\022\101\053" +
    "\072\054\106\055\105\001\002\000\020\012\103\016\073" +
    "\021\071\022\101\053\072\054\106\055\105\001\002\000" +
    "\006\003\u01ed\011\u01ee\001\002\000\004\055\u01f4\001\002" +
    "\000\006\003\u01f0\055\u01ef\001\002\000\006\003\u01f2\051" +
    "\u01f3\001\002\000\004\051\u01f1\001\002\000\014\003\uffc1" +
    "\004\uffc1\005\uffc1\010\uffc1\055\uffc1\001\002\000\014\003" +
    "\uffc0\004\uffc0\005\uffc0\010\uffc0\055\uffc0\001\002\000\014" +
    "\003\uffc5\004\uffc5\005\uffc5\010\uffc5\055\uffc5\001\002\000" +
    "\004\051\u01f5\001\002\000\014\003\uffc2\004\uffc2\005\uffc2" +
    "\010\uffc2\055\uffc2\001\002\000\004\011\u01f7\001\002\000" +
    "\004\055\u01f8\001\002\000\004\051\u01f9\001\002\000\014" +
    "\003\uffc3\004\uffc3\005\uffc3\010\uffc3\055\uffc3\001\002\000" +
    "\006\003\uffe4\010\uffe4\001\002\000\006\003\u01fd\006\u01fc" +
    "\001\002\000\012\003\032\035\035\036\034\037\033\001" +
    "\002\000\014\003\062\004\053\005\063\010\064\055\061" +
    "\001\002\000\004\002\ufffa\001\002\000\004\007\u0200\001" +
    "\002\000\014\003\062\004\053\005\063\010\064\055\061" +
    "\001\002\000\004\002\uffef\001\002\000\004\002\ufffc\001" +
    "\002\000\010\007\uffb7\045\014\046\013\001\002\000\004" +
    "\007\u0205\001\002\000\014\003\062\004\053\005\063\010" +
    "\064\055\061\001\002\000\004\002\uffff\001\002\000\012" +
    "\003\uffb7\007\uffb7\045\014\046\013\001\002\000\010\007" +
    "\uffb7\045\014\046\013\001\002\000\004\007\u020a\001\002" +
    "\000\014\003\062\004\053\005\063\010\064\055\061\001" +
    "\002\000\004\002\ufffe\001\002\000\006\003\u020d\007\u020e" +
    "\001\002\000\014\003\062\004\053\005\063\010\064\055" +
    "\061\001\002\000\014\003\062\004\053\005\063\010\064" +
    "\055\061\001\002\000\004\002\uffef\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufffd\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0210\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u01fa\001\001\000\004\014\011\001\001\000\002\001" +
    "\001\000\006\016\046\017\015\001\001\000\006\016\017" +
    "\017\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\022\001\001\000\002\001\001\000\004\020\040\001" +
    "\001\000\004\020\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\036\017\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\041\001\001\000\002" +
    "\001\001\000\006\016\043\017\015\001\001\000\002\001" +
    "\001\000\004\017\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\064\004\057\005" +
    "\065\006\056\007\053\010\055\012\054\013\051\001\001" +
    "\000\020\004\u01f9\005\065\006\056\007\053\010\055\012" +
    "\054\013\051\001\001\000\002\001\001\000\020\004\u01d8" +
    "\005\065\006\056\007\053\010\055\012\054\013\051\001" +
    "\001\000\020\004\u01d7\005\065\006\056\007\053\010\055" +
    "\012\054\013\051\001\001\000\020\004\u01d6\005\065\006" +
    "\056\007\053\010\055\012\054\013\051\001\001\000\020" +
    "\004\u01d5\005\065\006\056\007\053\010\055\012\054\013" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\021\u0186\023\101\024\074\025\075\026\077\030\067\033" +
    "\103\034\073\035\107\036\076\001\001\000\002\001\001" +
    "\000\026\021\106\023\101\024\074\025\075\026\077\030" +
    "\067\033\103\034\073\035\107\036\076\001\001\000\002" +
    "\001\001\000\020\004\066\005\065\006\056\007\053\010" +
    "\055\012\054\013\051\001\001\000\002\001\001\000\026" +
    "\021\u0150\023\101\024\074\025\075\026\077\030\067\033" +
    "\103\034\073\035\107\036\076\001\001\000\012\036\142" +
    "\041\u013d\042\141\043\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\347\023\101\024\074\025\075" +
    "\026\077\030\067\033\103\034\073\035\107\036\076\001" +
    "\001\000\026\021\346\023\101\024\074\025\075\026\077" +
    "\030\067\033\103\034\073\035\107\036\076\001\001\000" +
    "\026\021\345\023\101\024\074\025\075\026\077\030\067" +
    "\033\103\034\073\035\107\036\076\001\001\000\002\001" +
    "\001\000\026\021\342\023\101\024\074\025\075\026\077" +
    "\030\067\033\103\034\073\035\107\036\076\001\001\000" +
    "\026\021\321\023\101\024\074\025\075\026\077\030\067" +
    "\033\103\034\073\035\107\036\076\001\001\000\026\021" +
    "\320\023\101\024\074\025\075\026\077\030\067\033\103" +
    "\034\073\035\107\036\076\001\001\000\012\036\142\041" +
    "\310\042\141\043\150\001\001\000\026\021\307\023\101" +
    "\024\074\025\075\026\077\030\067\033\103\034\073\035" +
    "\107\036\076\001\001\000\012\036\142\041\146\042\141" +
    "\043\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\021\110\023\101\024\074\025\075\026\077\030\067" +
    "\033\103\034\073\035\107\036\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\036\264\044\266\045\171\050\164\001\001" +
    "\000\004\037\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\036\162\044\166\045\171\050\164\001\001" +
    "\000\002\001\001\000\012\036\142\041\157\042\141\043" +
    "\150\001\001\000\012\036\142\041\156\042\141\043\150" +
    "\001\001\000\012\036\142\041\155\042\141\043\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\203\001\001" +
    "\000\010\044\201\045\171\050\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\172" +
    "\001\001\000\002\001\001\000\006\045\175\050\164\001" +
    "\001\000\002\001\001\000\004\046\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\205" +
    "\001\001\000\004\047\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\021\241\023\101\024\074\025\075\026\077\030\067\033" +
    "\103\034\073\035\107\036\076\001\001\000\026\021\214" +
    "\023\101\024\074\025\075\026\077\030\067\033\103\034" +
    "\073\035\107\036\076\001\001\000\004\031\216\001\001" +
    "\000\012\036\142\041\232\042\141\043\150\001\001\000" +
    "\004\032\220\001\001\000\026\021\231\023\101\024\074" +
    "\025\075\026\077\030\067\033\103\034\073\035\107\036" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\021\237\023" +
    "\101\024\074\025\075\026\077\030\067\033\103\034\073" +
    "\035\107\036\076\001\001\000\026\021\235\023\101\024" +
    "\074\025\075\026\077\030\067\033\103\034\073\035\107" +
    "\036\076\001\001\000\004\031\236\001\001\000\002\001" +
    "\001\000\004\031\240\001\001\000\002\001\001\000\004" +
    "\031\242\001\001\000\004\032\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\256\001\001\000\002\001\001\000\004\037\260\001" +
    "\001\000\002\001\001\000\004\037\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\142\042\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\312\023\101\024\074\025\075" +
    "\026\077\030\067\033\103\034\073\035\107\036\076\001" +
    "\001\000\004\031\313\001\001\000\004\032\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\322\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\036\142\041" +
    "\331\042\141\043\150\001\001\000\012\036\142\041\326" +
    "\042\141\043\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\021\357\023\101\024\074\025\075\026\077\030\067\033" +
    "\103\034\073\035\107\036\076\001\001\000\004\027\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\021\372\023\101\024\074\025\075\026\077\030\067" +
    "\033\103\034\073\035\107\036\076\001\001\000\004\027" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\021\u0104" +
    "\023\101\024\074\025\075\026\077\030\067\033\103\034" +
    "\073\035\107\036\076\001\001\000\004\027\u0105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\021\u010e\023\101\024" +
    "\074\025\075\026\077\030\067\033\103\034\073\035\107" +
    "\036\076\001\001\000\004\027\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\021\u0120\023\101\024\074\025\075\026\077\030" +
    "\067\033\103\034\073\035\107\036\076\001\001\000\026" +
    "\021\u0115\023\101\024\074\025\075\026\077\030\067\033" +
    "\103\034\073\035\107\036\076\001\001\000\004\027\u0116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\u0127\023\101\024\074\025\075" +
    "\026\077\030\067\033\103\034\073\035\107\036\076\001" +
    "\001\000\004\027\u0128\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\021\u014b\023\101\024\074\025" +
    "\075\026\077\030\067\033\103\034\073\035\107\036\076" +
    "\001\001\000\026\021\u0140\023\101\024\074\025\075\026" +
    "\077\030\067\033\103\034\073\035\107\036\076\001\001" +
    "\000\004\027\u0141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\u014c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0165\001\001" +
    "\000\004\015\u0154\001\001\000\006\016\u0163\017\015\001" +
    "\001\000\002\001\001\000\006\016\u0156\017\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u015a\001\001\000\002\001\001\000\020\004\u015d" +
    "\005\065\006\056\007\053\010\055\012\054\013\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\021\u015f" +
    "\023\101\024\074\025\075\026\077\030\067\033\103\034" +
    "\073\035\107\036\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u017d" +
    "\001\001\000\004\040\u0168\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\u016c\005\065\006\056\007\053" +
    "\010\055\012\054\013\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\021\u0179\023\101\024\074\025\075" +
    "\026\077\030\067\033\103\034\073\035\107\036\076\001" +
    "\001\000\026\021\u016f\023\101\024\074\025\075\026\077" +
    "\030\067\033\103\034\073\035\107\036\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\u0180\005\065" +
    "\006\056\007\053\010\055\012\054\013\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\021\u0182\023\101" +
    "\024\074\025\075\026\077\030\067\033\103\034\073\035" +
    "\107\036\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\u01c4\001\001\000\006\006\u01b9\040\u01b8\001\001\000" +
    "\004\040\u018d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\u01aa\040\u0193\001\001\000" +
    "\006\011\u0194\040\u0193\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u019c\001\001\000\004\040\u0199\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u019f\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u01a5\040" +
    "\u0193\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\u01a9\040\u0193\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u01ad\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u01b0" +
    "\040\u0193\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u01b3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\u01bc\040\u0193\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u01bf\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\u01b9\040\u01b8\001" +
    "\001\000\004\040\u018d\001\001\000\002\001\001\000\026" +
    "\021\u01d1\023\101\024\074\025\075\026\077\030\067\033" +
    "\103\034\073\035\107\036\076\001\001\000\026\021\u01c7" +
    "\023\101\024\074\025\075\026\077\030\067\033\103\034" +
    "\073\035\107\036\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\u01e4\001\001\000\004\015\u01db\001\001" +
    "\000\002\001\001\000\020\004\u01de\005\065\006\056\007" +
    "\053\010\055\012\054\013\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\021\u01e0\023\101\024\074\025" +
    "\075\026\077\030\067\033\103\034\073\035\107\036\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\u01e8\005\065\006\056\007\053\010\055\012" +
    "\054\013\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\021\u01f5\023\101\024\074\025\075\026\077\030" +
    "\067\033\103\034\073\035\107\036\076\001\001\000\026" +
    "\021\u01eb\023\101\024\074\025\075\026\077\030\067\033" +
    "\103\034\073\035\107\036\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u01fe\001" +
    "\001\000\022\003\u01fd\004\057\005\065\006\056\007\053" +
    "\010\055\012\054\013\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\u0200\004\057\005\065\006\056" +
    "\007\053\010\055\012\054\013\051\001\001\000\004\051" +
    "\u0201\001\001\000\002\001\001\000\004\014\u0203\001\001" +
    "\000\002\001\001\000\022\003\u0205\004\057\005\065\006" +
    "\056\007\053\010\055\012\054\013\051\001\001\000\002" +
    "\001\001\000\004\014\u020b\001\001\000\004\014\u0208\001" +
    "\001\000\002\001\001\000\022\003\u020a\004\057\005\065" +
    "\006\056\007\053\010\055\012\054\013\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\u0210\004\057" +
    "\005\065\006\056\007\053\010\055\012\054\013\051\001" +
    "\001\000\022\003\u020e\004\057\005\065\006\056\007\053" +
    "\010\055\012\054\013\051\001\001\000\004\051\u020f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception {
		//new parser(new Lexer(new FileInputStream(args[0]))).parse();
		new parser(new Lexer(System.in)).parse();
	}
	public void syntax_error(Symbol s) {
		report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                //Interfaz.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("Error fatal de sintaxis. Se ha detenido el parseo.");
                //Interfaz.outputArea.append("Error fatal de sintaxis. Se ha detenido el parseo.");

	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // valores_parametros ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // valores_parametros ::= NUM COMA valores_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // valores_parametros ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // valores_parametros ::= error COMA valores_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // valores_parametros ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // valores_parametros ::= ID COMA valores_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores_parametros",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // llamar_subprograma ::= ID PARIZQ valores_parametros error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_subprograma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // llamar_subprograma ::= ID PARIZQ valores_parametros PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamar_subprograma",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // llamada_subprograma ::= llamar_subprograma error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_subprograma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // llamada_subprograma ::= llamar_subprograma PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_subprograma",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // get ::= GET PARIZQ ID PARDER error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // get ::= GET PARIZQ ID error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // get ::= GET PARIZQ error PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // get ::= GET error ID PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // get ::= GET PARIZQ ID PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("get",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // put ::= PUT PARIZQ NUM PARDER error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // put ::= PUT PARIZQ NUM error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // put ::= PUT PARIZQ error PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // put ::= PUT error NUM PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // put ::= PUT PARIZQ STR PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // put ::= PUT PARIZQ NUM PARDER PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("put",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // operando_rel ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando_rel",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // operando_rel ::= llamar_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando_rel",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // operando_rel ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando_rel",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // operando_rel ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando_rel",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expresion_booleana ::= operando_rel OPREL operando_rel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_booleana",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // condicion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // condicion ::= expresion_booleana 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // condicion ::= expresion_booleana XOR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // condicion ::= expresion_booleana AND condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // condicion ::= expresion_booleana OR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // bloque_else ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // bloque_else ::= ELSE codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // bloque_elsif ::= ELSIF condicion error codigo bloque_elsif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // bloque_elsif ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // bloque_elsif ::= ELSIF condicion THEN codigo bloque_elsif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_elsif",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // bloque_if ::= ID condicion THEN codigo bloque_elsif bloque_else END IF error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // bloque_if ::= ID condicion THEN codigo bloque_elsif bloque_else END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // bloque_if ::= ID condicion THEN codigo bloque_elsif bloque_else error IF PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // bloque_if ::= ID condicion error codigo bloque_elsif bloque_else END IF PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // bloque_if ::= IF condicion THEN codigo bloque_elsif bloque_else END IF PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // salir_ciclo ::= EXIT WHEN condicion error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // salir_ciclo ::= EXIT error condicion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // salir_ciclo ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // salir_ciclo ::= EXIT WHEN condicion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("salir_ciclo",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // bloque_while ::= WHILE condicion LOOP codigo salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // bloque_while ::= WHILE condicion LOOP codigo salir_ciclo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // bloque_while ::= WHILE condicion LOOP codigo salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // bloque_while ::= WHILE condicion error codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // bloque_while ::= WHILE condicion LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_while",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // bloque_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // bloque_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // bloque_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // bloque_for ::= FOR ID IN NUM DOSPUNTOS NUM error codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // bloque_for ::= FOR ID IN NUM DOSPUNTOS error LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // bloque_for ::= FOR ID IN NUM error NUM LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // bloque_for ::= FOR ID IN error DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // bloque_for ::= FOR ID error NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // bloque_for ::= FOR error IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // bloque_for ::= FOR ID IN NUM DOSPUNTOS NUM LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_for",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // bloque_loop ::= LOOP codigo salir_ciclo END LOOP error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // bloque_loop ::= LOOP codigo salir_ciclo error LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // bloque_loop ::= LOOP codigo salir_ciclo END LOOP PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_loop",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // f ::= PARIZQ expresion_matematica PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // f ::= NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // f ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // tp ::= OPMULT f tp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tp",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // t ::= f tp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ep ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ep",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ep ::= OPSUM t ep 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ep",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresion_matematica ::= t ep 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // asignacion ::= ID OPASG FALSE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // asignacion ::= ID error FALSE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // asignacion ::= ID OPASG FALSE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // asignacion ::= ID OPASG TRUE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // asignacion ::= ID error TRUE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // asignacion ::= ID OPASG TRUE PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // asignacion ::= ID OPASG STR error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // asignacion ::= ID OPASG error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // asignacion ::= ID error STR PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // asignacion ::= ID OPASG STR PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacion ::= ID OPASG llamar_subprograma error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacion ::= ID error llamar_subprograma PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // asignacion ::= ID OPASG llamar_subprograma PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // asignacion ::= ID OPASG expresion_matematica error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // asignacion ::= ID error expresion_matematica PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // asignacion ::= ID OPASG expresion_matematica PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // lista_asignacion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_asignacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // lista_asignacion ::= lista_asignacion asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_asignacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // codigo ::= llamada_subprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // codigo ::= llamada_subprograma codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // codigo ::= get 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // codigo ::= get codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // codigo ::= put 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // codigo ::= put codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // codigo ::= bloque_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // codigo ::= bloque_if codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // codigo ::= bloque_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // codigo ::= bloque_loop codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // codigo ::= bloque_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // codigo ::= bloque_while codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // codigo ::= bloque_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // codigo ::= bloque_for codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // codigo ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // codigo ::= asignacion codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // modoParametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modoParametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // modoParametro ::= IN OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modoParametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // modoParametro ::= OUT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modoParametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // modoParametro ::= IN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("modoParametro",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lista_identificadores ::= error COMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_identificadores ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_identificadores ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_identificadores ::= ID COMA lista_identificadores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // especificacion_parametros ::= lista_identificadores error modoParametro tipoVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificacion_parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // especificacion_parametros ::= lista_identificadores OPDEC modoParametro tipoVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificacion_parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // especificacion_parametros ::= lista_identificadores error modoParametro tipoVar PYC especificacion_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificacion_parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // especificacion_parametros ::= lista_identificadores OPDEC modoParametro tipoVar PYC especificacion_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("especificacion_parametros",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros ::= PARIZQ especificacion_parametros error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros ::= error especificacion_parametros PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros ::= PARIZQ especificacion_parametros PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_principal ::= PARDER especificacion_parametros error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_principal",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_principal ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_principal",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_principal ::= PARIZQ especificacion_parametros PARDER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_principal",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funcion ::= FUNCTION ID parametros RETURN tipoVar IS lista_declaracion BEGIN codigo END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funcion ::= FUNCTION ID parametros RETURN tipoVar IS lista_declaracion BEGIN codigo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // funcion ::= FUNCTION ID parametros RETURN tipoVar IS lista_declaracion BEGIN codigo error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // funcion ::= FUNCTION ID parametros RETURN tipoVar IS lista_declaracion error codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funcion ::= FUNCTION ID parametros error tipoVar IS lista_declaracion BEGIN codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funcion ::= FUNCTION error parametros RETURN tipoVar IS lista_declaracion BEGIN codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funcion ::= FUNCTION ID parametros RETURN tipoVar IS lista_declaracion BEGIN codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // procedimiento ::= PROCEDURE ID parametros IS lista_declaracion BEGIN codigo END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // procedimiento ::= PROCEDURE ID parametros IS lista_declaracion BEGIN codigo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedimiento ::= PROCEDURE ID parametros IS lista_declaracion BEGIN codigo error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // procedimiento ::= PROCEDURE ID parametros IS lista_declaracion error codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // procedimiento ::= PROCEDURE error parametros IS lista_declaracion BEGIN codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // procedimiento ::= PROCEDURE ID parametros IS lista_declaracion BEGIN codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedimiento",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dimension_arreglo ::= tipoVar RANGE error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dimension_arreglo ::= tipoVar RANGE CAJA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dimension_arreglo ::= NUM DOSPUNTOS NUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dimension_arreglo ::= NUM DOSPUNTOS NUM COMA dimension_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dimension_arreglo ::= tipoVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dimension_arreglo ::= tipoVar COMA dimension_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dimension_arreglo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaracion_arreglo ::= ID OPDEC ARRAY PARIZQ dimension_arreglo PARDER OF tipoVar error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracion_arreglo ::= ID OPDEC ARRAY PARIZQ dimension_arreglo PARDER error tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaracion_arreglo ::= ID OPDEC ARRAY PARIZQ dimension_arreglo error OF tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracion_arreglo ::= ID OPDEC ARRAY error dimension_arreglo PARDER OF tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // declaracion_arreglo ::= ID OPDEC error PARIZQ dimension_arreglo PARDER OF tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion_arreglo ::= ID error ARRAY PARIZQ dimension_arreglo PARDER OF tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion_arreglo ::= ID OPDEC ARRAY PARIZQ dimension_arreglo PARDER OF tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_arreglo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion_funcion ::= FUNCTION ID parametros RETURN tipoVar error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion_funcion ::= FUNCTION ID parametros error tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion_funcion ::= FUNCTION error parametros RETURN tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion_funcion ::= FUNCTION ID parametros RETURN tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_funcion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion_variable ::= ID OPDEC tipoVar error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion_variable ::= ID error tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracion_variable ::= ID OPDEC tipoVar PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracion_variable ::= ID error declaracion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracion_variable ::= ID COMA declaracion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracion_procedimiento ::= PROCEDURE ID parametros error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracion_procedimiento ::= PROCEDURE error parametros PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracion_procedimiento ::= PROCEDURE ID parametros PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoVar ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoVar ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoVar ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoVar ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_declaracion ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_declaracion ::= funcion lista_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_declaracion ::= procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_declaracion ::= procedimiento lista_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_declaracion ::= declaracion_arreglo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_declaracion ::= declaracion_arreglo lista_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_declaracion ::= declaracion_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_declaracion ::= declaracion_funcion lista_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_declaracion ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_declaracion ::= declaracion_variable lista_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_declaracion ::= declaracion_procedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lista_declaracion ::= declaracion_procedimiento lista_declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fin_parseo ::= 
            {
              Object RESULT =null;
		 System.out.println("Parseo ha finalizado.");
                                                                /*Interfaz.outputArea.append("Parseo ha finalizado \n"); */
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin_parseo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // begin_cuerpo_principal ::= BEGIN codigo END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // begin_cuerpo_principal ::= BEGIN codigo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // begin_cuerpo_principal ::= BEGIN codigo error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // begin_cuerpo_principal ::= error codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // begin_cuerpo_principal ::= BEGIN codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // begin_cuerpo_principal ::= lista_declaracion BEGIN codigo END ID error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // begin_cuerpo_principal ::= lista_declaracion BEGIN codigo END error PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // begin_cuerpo_principal ::= lista_declaracion BEGIN codigo error ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // begin_cuerpo_principal ::= lista_declaracion error codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // begin_cuerpo_principal ::= lista_declaracion BEGIN codigo END ID PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_cuerpo_principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo_principal ::= FUNCTION ID parametros_principal error begin_cuerpo_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_principal ::= FUNCTION error parametros_principal IS begin_cuerpo_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo_principal ::= FUNCTION ID parametros_principal RETURN tipoVar IS begin_cuerpo_principal fin_parseo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo_principal ::= PROCEDURE ID parametros_principal error begin_cuerpo_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_principal ::= PROCEDURE error parametros_principal IS begin_cuerpo_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo_principal ::= error ID parametros_principal IS begin_cuerpo_principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // cuerpo_principal ::= PROCEDURE ID parametros_principal IS begin_cuerpo_principal fin_parseo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_principal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= cuerpo_principal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

