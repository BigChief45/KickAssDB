
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 29 00:42:48 CST 2014
//----------------------------------------------------

package kickassdb;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 29 00:42:48 CST 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\002\005\000\002\002\003\000\002\002\005" +
    "\000\002\002\003\000\002\002\005\000\002\002\003\000" +
    "\002\002\002\000\002\003\005\000\002\004\010\000\002" +
    "\025\002\000\002\007\007\000\002\010\003\000\002\010" +
    "\006\000\002\011\004\000\002\011\002\000\002\012\004" +
    "\000\002\012\002\000\002\005\012\000\002\013\005\000" +
    "\002\013\002\000\002\026\002\000\002\014\006\000\002" +
    "\014\003\000\002\027\002\000\002\006\006\000\002\030" +
    "\002\000\002\006\006\000\002\006\003\000\002\006\003" +
    "\000\002\015\007\000\002\017\003\000\002\017\003\000" +
    "\002\017\005\000\002\017\007\000\002\017\005\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\020" +
    "\005\000\002\020\003\000\002\020\007\000\002\020\005" +
    "\000\002\016\005\000\002\016\003\000\002\016\007\000" +
    "\002\016\005\000\002\021\007\000\002\021\002\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\005\000\002\023\007\000\002\023\007\000\002\023\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\012\002\ufff8\004\007\011\012\015\013\001" +
    "\002\000\006\002\ufffd\031\166\001\002\000\006\002\ufff9" +
    "\031\164\001\002\000\006\002\ufffb\031\162\001\002\000" +
    "\006\005\135\006\136\001\002\000\004\002\134\001\002" +
    "\000\006\002\uffff\031\132\001\002\000\004\012\104\001" +
    "\002\000\012\022\017\023\015\033\016\036\014\001\002" +
    "\000\010\016\uffdf\032\070\035\067\001\002\000\004\027" +
    "\064\001\002\000\004\016\uffe0\001\002\000\004\027\057" +
    "\001\002\000\004\016\021\001\002\000\004\036\022\001" +
    "\002\000\014\002\uffd3\017\uffd3\024\052\031\uffd3\032\051" +
    "\001\002\000\010\002\uffcf\017\025\031\uffcf\001\002\000" +
    "\006\002\uffe1\031\uffe1\001\002\000\010\036\026\037\027" +
    "\040\031\001\002\000\016\002\uffcc\020\uffcc\021\uffcc\031" +
    "\uffcc\034\uffcc\035\047\001\002\000\014\002\uffcd\020\uffcd" +
    "\021\uffcd\031\uffcd\034\uffcd\001\002\000\004\034\032\001" +
    "\002\000\014\002\uffce\020\uffce\021\uffce\031\uffce\034\uffce" +
    "\001\002\000\010\036\026\037\027\040\031\001\002\000" +
    "\012\002\uffc8\020\035\021\036\031\uffc8\001\002\000\006" +
    "\002\uffd0\031\uffd0\001\002\000\010\036\026\037\027\040" +
    "\031\001\002\000\010\036\026\037\027\040\031\001\002" +
    "\000\004\034\040\001\002\000\010\036\026\037\027\040" +
    "\031\001\002\000\012\002\uffc8\020\035\021\036\031\uffc8" +
    "\001\002\000\006\002\uffc9\031\uffc9\001\002\000\004\034" +
    "\044\001\002\000\010\036\026\037\027\040\031\001\002" +
    "\000\012\002\uffc8\020\035\021\036\031\uffc8\001\002\000" +
    "\006\002\uffca\031\uffca\001\002\000\004\036\050\001\002" +
    "\000\014\002\uffcb\020\uffcb\021\uffcb\031\uffcb\034\uffcb\001" +
    "\002\000\004\036\022\001\002\000\004\036\053\001\002" +
    "\000\012\002\uffd1\017\uffd1\031\uffd1\032\054\001\002\000" +
    "\004\036\022\001\002\000\010\002\uffd2\017\uffd2\031\uffd2" +
    "\001\002\000\010\002\uffd4\017\uffd4\031\uffd4\001\002\000" +
    "\006\033\061\036\060\001\002\000\004\030\063\001\002" +
    "\000\004\030\062\001\002\000\004\016\uffdb\001\002\000" +
    "\004\016\uffda\001\002\000\004\036\065\001\002\000\004" +
    "\030\066\001\002\000\004\016\uffd9\001\002\000\004\036" +
    "\101\001\002\000\004\036\071\001\002\000\010\016\uffd7" +
    "\032\073\035\074\001\002\000\004\016\uffde\001\002\000" +
    "\004\036\071\001\002\000\004\036\075\001\002\000\006" +
    "\016\uffd5\032\076\001\002\000\004\036\071\001\002\000" +
    "\004\016\uffd6\001\002\000\004\016\uffd8\001\002\000\006" +
    "\016\uffdc\032\102\001\002\000\004\036\071\001\002\000" +
    "\004\016\uffdd\001\002\000\004\036\105\001\002\000\006" +
    "\013\uffeb\027\107\001\002\000\004\013\116\001\002\000" +
    "\004\036\110\001\002\000\006\030\uffe8\032\uffea\001\002" +
    "\000\004\030\112\001\002\000\004\013\uffec\001\002\000" +
    "\004\032\114\001\002\000\004\036\110\001\002\000\004" +
    "\030\uffe9\001\002\000\004\027\117\001\002\000\006\037" +
    "\120\040\121\001\002\000\006\030\uffe3\032\uffe7\001\002" +
    "\000\006\030\uffe2\032\uffe5\001\002\000\004\030\123\001" +
    "\002\000\006\002\uffed\031\uffed\001\002\000\004\032\125" +
    "\001\002\000\006\037\120\040\121\001\002\000\004\030" +
    "\uffe4\001\002\000\004\032\130\001\002\000\006\037\120" +
    "\040\121\001\002\000\004\030\uffe6\001\002\000\012\002" +
    "\ufff8\004\007\011\012\015\013\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002\000\004\036\161\001" +
    "\002\000\004\036\137\001\002\000\004\027\140\001\002" +
    "\000\004\036\141\001\002\000\006\025\146\026\145\001" +
    "\002\000\004\030\143\001\002\000\006\002\ufff6\031\ufff6" +
    "\001\002\000\010\007\152\030\uffee\032\uffee\001\002\000" +
    "\004\027\147\001\002\000\010\007\ufff3\030\ufff3\032\ufff3" +
    "\001\002\000\004\037\150\001\002\000\004\030\151\001" +
    "\002\000\010\007\ufff2\030\ufff2\032\ufff2\001\002\000\004" +
    "\010\160\001\002\000\006\030\ufff5\032\ufff5\001\002\000" +
    "\006\030\ufff0\032\155\001\002\000\004\036\141\001\002" +
    "\000\004\030\ufff4\001\002\000\004\030\ufff1\001\002\000" +
    "\006\030\uffef\032\uffef\001\002\000\006\002\ufff7\031\ufff7" +
    "\001\002\000\012\002\ufff8\004\007\011\012\015\013\001" +
    "\002\000\004\002\ufffc\001\002\000\012\002\ufff8\004\007" +
    "\011\012\015\013\001\002\000\004\002\ufffa\001\002\000" +
    "\012\002\ufff8\004\007\011\012\015\013\001\002\000\004" +
    "\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\014\002\007\003\010\004\003\005\005\015" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\022\001\001\000\002" +
    "\001\001\000\004\021\023\001\001\000\002\001\001\000" +
    "\004\022\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\032\001" +
    "\001\000\004\023\033\001\001\000\002\001\001\000\004" +
    "\022\042\001\001\000\004\022\036\001\001\000\002\001" +
    "\001\000\004\022\040\001\001\000\004\023\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\044\001" +
    "\001\000\004\023\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\105\001\001\000\002\001\001\000\004\014" +
    "\110\001\001\000\004\026\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\121" +
    "\001\001\000\004\027\126\001\001\000\004\030\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\130\001\001\000\002\001\001\000\014" +
    "\002\132\003\010\004\003\005\005\015\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\141\001\001\000" +
    "\004\010\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\153\001\001\000\004\011" +
    "\155\001\001\000\004\007\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\162\003\010\004\003\005\005\015\004\001\001" +
    "\000\002\001\001\000\014\002\164\003\010\004\003\005" +
    "\005\015\004\001\001\000\002\001\001\000\014\002\166" +
    "\003\010\004\003\005\005\015\004\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


             
     public static void main(String args[]) throws Exception
     {
          //new parser(new Lexer(new FileInputStream(args[0]))).parse();
          new parser(new Lexer(System.in)).parse();               
     }

     public void syntax_error(Symbol s)
     {
         //report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
         MainWindow.ReviewTab.setSelectedIndex(0);
         KickAssDB.mainwindow.parserResult = "Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";         
     }

     public void unrecovered_syntax_error(Symbol s)
     {               
        MainWindow.ReviewTab.setSelectedIndex(0); 
        KickAssDB.mainwindow.parserResult = "Fatal Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";        
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    private static final int max_varchar_size = 40;

    private ArrayList<Attribute> domain_temp = new ArrayList<Attribute>();
    private ArrayList<Attribute> primaryKey_temp = new ArrayList<Attribute>();
    private Tuple temp_tuple = new Tuple();
    private Attribute temp_pk = null;
    private int pk_count = 0;
    private ArrayList<String> attName = new ArrayList<String>();
    private ArrayList<String> valType = new ArrayList<String>();
    private int current_attribute_size = 0;
   
    /* SELECT OPERATIONS */
    private ArrayList<String> table_names = new ArrayList<String>();    
    private ArrayList<String> field_names = new ArrayList<String>();
    private ArrayList<String> field_aliases = new ArrayList<String>();
    private ArrayList<QueryFilter> where_filters = new ArrayList<QueryFilter>();

    private void resetGlobals()
    {
        /* This method will reset all the global variables that need to be reset
           when called */

        table_names = new ArrayList<String>();
        field_names = new ArrayList<String>();
        field_aliases = new ArrayList<String>();
        where_filters = new ArrayList<QueryFilter>();
    }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // add_where ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_where",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // add_where ::= OR filter OPREL filter add_where 
            {
              Object RESULT =null;
		int fv1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fv1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fv1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String operand = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fv2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fv2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fv2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                  /* Create a new Filter Object */
                                                  QueryFilter qf = new QueryFilter();

                                                  /* Assign the operand and bool value to the filter */
                                                  qf.setOperand(operand);
                                                  qf.setBoolValue("OR");

                                                  /* Set both filter parts */
                                                  qf.setLeftFilter( (FilterPart) fv1);
                                                  qf.setRightFilter( (FilterPart) fv2);

                                                  /* Add it to the list of filters for this query */
                                                  where_filters.add(qf);
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_where",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // add_where ::= AND filter OPREL filter add_where 
            {
              Object RESULT =null;
		int fv1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fv1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fv1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String operand = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fv2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fv2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fv2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                  /* Create a new Filter Object */
                                                  QueryFilter qf = new QueryFilter();

                                                  /* Assign the operand and bool value to the filter */
                                                  qf.setOperand(operand);
                                                  qf.setBoolValue("AND");

                                                  /* Set both filter parts */
                                                  qf.setLeftFilter( (FilterPart) fv1);
                                                  qf.setRightFilter( (FilterPart) fv2);

                                                  /* Add it to the list of filters for this query */
                                                  where_filters.add(qf);
                                              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_where",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // filter ::= ID POINT ID 
            {
              Object RESULT =null;
		int alias_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alias_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String alias_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int field_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String field_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    /* Value is an existing field with alias */
                                    FilterPart fp = new FilterPart();
                                    fp.setFieldName(field_name);
                                    fp.setFieldAlias(alias_id);

                                    RESULT = fp;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // filter ::= ID 
            {
              Object RESULT =null;
		int field_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String field_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    /* Value is an existing field */
                                    FilterPart fp = new FilterPart();
                                    fp.setFieldName(field_name);

                                    RESULT = fp;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // filter ::= NUM 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		                                    
                                    /* Value is an integer */
                                    FilterPart fp = new FilterPart();
                                    fp.setValue(value);

                                    RESULT = fp;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // filter ::= STR 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    /* Value is a string */
                                    FilterPart fp = new FilterPart();
                                    fp.setValue(value);

                                    RESULT = fp;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filter",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // where ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("where",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // where ::= WHERE filter OPREL filter add_where 
            {
              Object RESULT =null;
		int fv1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fv1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fv1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int operandleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operandright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String operand = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fv2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fv2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fv2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        /* Create a new Filter Object */
                        QueryFilter qf = new QueryFilter();

                        /* Assign the operand to the filter */
                        qf.setOperand(operand);

                        /* Set both filter parts */
                        qf.setLeftFilter( (FilterPart) fv1);
                        qf.setRightFilter( (FilterPart) fv2);

                        /* Add it to the list of filters for this query */
                        where_filters.add(qf);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // select_tables ::= ID AS ID 
            {
              Object RESULT =null;
		int table_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int table_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String table_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alias_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alias_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alias_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 /* With Alias */
                                 table_names.add(table_name.toString());

                                 /* Add this alias to the table specified in the query */
                                 Schema df_schema = MainWindow.getDefaultSchema();  // Get current Schema
                                 Table query_table = df_schema.getTable(table_name.toString()); // Get Table Object
                                 query_table.setTable_alias(new Alias(alias_name.toString(), query_table)); // Set this alias to this table
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_tables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // select_tables ::= ID AS ID COMA select_tables 
            {
              Object RESULT =null;
		int table_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int table_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String table_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int alias_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alias_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String alias_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                 /* With Alias */
                                 table_names.add(table_name.toString());

                                 /* Add this alias to the table specified in the query */
                                 Schema df_schema = MainWindow.getDefaultSchema();  // Get current Schema
                                 Table query_table = df_schema.getTable(table_name.toString()); // Get Table Object
                                 query_table.setTable_alias(new Alias(alias_name.toString(), query_table)); // Set this alias to this table
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_tables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // select_tables ::= ID 
            {
              Object RESULT =null;
		int table_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int table_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String table_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 table_names.add(table_name.toString());
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_tables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // select_tables ::= ID COMA select_tables 
            {
              Object RESULT =null;
		int table_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int table_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String table_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                 table_names.add(table_name.toString());
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_tables",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // select_more_fields ::= ID POINT ID 
            {
              Object RESULT =null;
		int table_aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int table_aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String table_alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        field_names.add(field_id);
                                                        field_aliases.add(table_alias);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_more_fields",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // select_more_fields ::= ID POINT ID COMA select_more_fields 
            {
              Object RESULT =null;
		int table_aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int table_aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String table_alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                                        field_names.add(field_id);
                                                        field_aliases.add(table_alias);
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_more_fields",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // select_more_fields ::= ID 
            {
              Object RESULT =null;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        field_names.add(field_id);
                                                        field_aliases.add("");
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_more_fields",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // select_more_fields ::= ID COMA select_more_fields 
            {
              Object RESULT =null;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                                        field_names.add(field_id);
                                                        field_aliases.add("");
                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_more_fields",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // select_fields ::= SUM PARLEFT ID PARRIGHT 
            {
              Object RESULT =null;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                 field_names.add(field_id);
                                 RESULT = 4; 
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // select_fields ::= COUNT PARLEFT ID PARRIGHT 
            {
              Object RESULT =null;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		                                
                                field_names.add(field_id);
                                RESULT = 3;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // select_fields ::= COUNT PARLEFT ASTERISK PARRIGHT 
            {
              Object RESULT =null;
		 
                                 RESULT = 2; 
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // select_fields ::= ID POINT ID 
            {
              Object RESULT =null;
		int table_aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int table_aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String table_alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 /* With Alias */
                                 field_names.add(field_id);

                                 /* Add this alias to the list, to validate later */
                                 field_aliases.add(table_alias.toString());

                                 RESULT = 1;                                 
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // select_fields ::= ID POINT ID COMA select_more_fields 
            {
              Object RESULT =null;
		int table_aliasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int table_aliasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String table_alias = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                 /* With Alias */
                                 field_names.add(field_id);

                                 /* Add this alias to the list, to validate later */
                                 field_aliases.add(table_alias.toString());

                                 RESULT = 1;
                                 
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // select_fields ::= ID COMA select_more_fields 
            {
              Object RESULT =null;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                 field_names.add(field_id);
                                 field_aliases.add("");
                                 RESULT = 1; 
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // select_fields ::= ID 
            {
              Object RESULT =null;
		int field_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int field_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String field_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                 field_names.add(field_id);
                                 field_aliases.add("");
                                 RESULT = 1;
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // select_fields ::= ASTERISK 
            {
              Object RESULT =null;
		 
                                 RESULT = 0; 
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_fields",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // select ::= SELECT select_fields FROM select_tables where 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		                           
                /* Get the current default schema */
                Schema schema = KickAssDB.mainwindow.getDefault_schema();
                
                /* Validate that the field aliases used DO exist on the schema */
                Collections.reverse(field_aliases);
                boolean aliases_exist = schema.validateAliases(field_aliases);

                if ( aliases_exist == false )
                {
                    /* One or more aliases Do not exist, display error */
                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "One or more of aliases specified do not exist.", "Error", JOptionPane.ERROR_MESSAGE);
                    resetGlobals();
                    return null;
                }

                /* Check if there are more than 2 tables in the query */
                if ( table_names.size() > 2 )
                {
                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "FROM statement can only have a maximum of two tables.", "Error", JOptionPane.ERROR_MESSAGE);
                    resetGlobals();
                    return null;
                }

                /* Get Table Objects using the recieved table names in the FROM statement */
                ArrayList<Table> from_tables = new ArrayList<Table>();

                for ( String s : table_names )                
                    if ( schema.getTable(s) != null )
                        from_tables.add(schema.getTable(s));                

                Collections.reverse(from_tables);
                Collections.reverse(field_names);

                /* Check what kind of select statement it is */
                switch ( (int) type ) 
                {
                    case 0:
                        /* SELECT * */
                        Operations.selectAll(from_tables, where_filters);
                        break;

                    case 1:
                        /* SELECT -fields- */
                        Operations.selectFields(field_names, from_tables, where_filters, field_aliases);
                        break;

                    case 2:
                        /* SELECT COUNT (*) */
                        Operations.selectCount(from_tables);
                        break;

                    case 3:
                        /* SELECT COUNT(field) */
                        Operations.selectCount(field_names, from_tables);
                        break;

                    case 4:
                        /* SELECT SUM() */
                        Operations.selectSum(field_names, from_tables);
                        break;
                }

                /* Reset ArrayLists Names */
                resetGlobals();
                
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // record_values ::= STR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                        valType.add("VARCHAR");
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_values",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // record_values ::= NUM 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                        Value v = new Value(val);
                                        try
                                        {
                                            Integer n = Integer.parseInt(val.toString());
                                            temp_tuple.addValue(v);
                                            valType.add("INTEGER");
                                        }
                                        catch(Exception e)
                                        {
                                            System.err.println(e.getMessage());
                                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Integer too large or too small!", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                        }
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_values",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // record_values ::= STR NT$3 COMA record_values 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_values",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                        valType.add("VARCHAR");
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // record_values ::= NUM NT$2 COMA record_values 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_values",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
                                       
                                        Value v = new Value(val);
                                        try
                                        {
                                            Integer n = Integer.parseInt(val.toString());
                                            temp_tuple.addValue(v);
                                            valType.add("INTEGER");

                                        }
                                        catch(Exception e)
                                        {
                                            System.err.println(e.getMessage());
                                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Integer too large or too small!", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                            
                                        }

                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // attribute_names ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 attName.add(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_names",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // attribute_names ::= ID NT$1 COMA attribute_names 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_names",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 attName.add(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // attributes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // attributes ::= PARLEFT attribute_names PARRIGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attributes",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // insert_record ::= INSERT INTO ID attributes VALUES PARLEFT record_values PARRIGHT 
            {
              Object RESULT =null;
		int table_nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int table_nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String table_name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        /* Find the table to insert */                       
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();
                        boolean finished_loop = true;
                       
                        /* Check if any tables exist */
                        if ( schema.getTable_count() > 0 )
                        {
                            /* Look on all tables and search for the table */
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().toLowerCase().equals(table_name.toString().toLowerCase()) )
                                {
                                    /* Table found, validate tuple before inserting */
                                   
                                    /* Obtain a new tuple with correct attribute value ordering */
                                    Tuple new_tuple;
                                    new_tuple = Tuple.setTuple_order(attName, t.getTable_domain(), temp_tuple);

                                    boolean val = true;

                                    val = Validations.validateInsertingTuple(attName, valType, t) && 
                                          Validations.validateColumnSize(temp_tuple) && 
                                          Validations.validateVarcharSize(new_tuple, t.getTable_domain()); 

                                    if ( val && t.getPrimary_key().getAttribute_name() != null ) 
                                        val = Validations.validatePrimaryKey(new_tuple, t);


                                    attName.clear();
                                    valType.clear();

                                    /* Insert tuple into the table */
                                    if(val) 
                                    {
                                        t.addTuple(new_tuple);
                                        t.printTuples();
                                        /* add the data to the file */
                                        String path = "src/schemas/" + schema.getName() + "/" + t.getTable_name() + "/data.txt";                                        
                                        AddFile.AddData(path, new_tuple);
                                    }

                                    /* Reset the temp tuple */
                                    temp_tuple = new Tuple();

                                    /* Exit from the cycle */
                                    finished_loop = false;
                                    break;
                                }                                                                                                                                   
                            }

                            if ( finished_loop == true )
                            {
                                /* Table Not Found */
                                JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                            }
                         }
                         else
                         {
                            /* Table Not Found */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                         }
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert_record",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primary_key ::= 
            {
              Object RESULT =null;
		            
                                        /* Primary Key Production false */                          
                                        RESULT = false;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // primary_key ::= PRIMARY KEY 
            {
              Object RESULT =null;
		      
                                        /* Primary Key Production true */                                       
                                        RESULT = true;
                                        pk_count++;
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_key",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // coma ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // coma ::= COMA table_attribute 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("coma",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attribute_type ::= VARCHAR PARLEFT NUM PARRIGHT 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object size = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    /* Attribute's type is Varchar */
                                    RESULT = Attribute.Type.VARCHAR;

                                    /* Get the attribute's size */
                                    /* Check if it doesn't exceed max size */
                                    if ( Integer.parseInt(size.toString()) <= max_varchar_size )
                                    {
                                        current_attribute_size = Integer.parseInt(size.toString());
                                    }
                                    else
                                    {
                                        //JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Varchar type can't exceed a max size of 40.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                    }
                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // attribute_type ::= INT 
            {
              Object RESULT =null;
		
                                    /* Attribute type is Integer */
                                    RESULT = Attribute.Type.INTEGER;  
                               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("attribute_type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // table_attribute ::= ID attribute_type primary_key NT$0 coma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pkright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("table_attribute",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pkleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pkright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pk = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                               /* Get current Attribute's name */                              
                               Attribute current_attribute = new Attribute(name.toString(), (Attribute.Type)type, current_attribute_size);
                               domain_temp.add(current_attribute);                               

                               /* Check if this attribute is possible primary key */
                               if ( (boolean) pk == true )
                               {
                                   temp_pk = current_attribute; 
                                   //System.out.println("~~~der");
                               }

                               /* Reset attribute size variable */
                               current_attribute_size = 0;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // create_table ::= CREATE TABLE ID PARLEFT table_attribute PARRIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        /* Get the current default schema */
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();

                        /* Get current table count for default schema */
                        int table_count = schema.getTable_count();
                                        
                        /* Check if table name is already taken */
                        if ( table_count > 0 )
                        {
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().equals(id.toString()) )
                                {
                                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + id.toString() + "' Already Exists.", "Error", JOptionPane.ERROR_MESSAGE);                                    
                                    return null; // ???
                                }
                            }
                        }

                        /* If table name does not exist, proceed */
                        ArrayList<Attribute> temp = new ArrayList<Attribute>();
                       
                        /* Instance a new table */
                        Table table = new Table(table_count, id.toString(), domain_temp);
                        domain_temp = new ArrayList<Attribute>();
                        
                        /* If there is primary key, set it */
                        if ( pk_count == 1 || pk_count == 0)
                        {
                            table.setPrimary_key(temp_pk);

                            /* Add table to default schema */
                            schema.addTable(table);
                            /* Create a folder of the table */
                            AddFile.AddNewFolder("src/schemas/" + schema.getName() + "/" + table.getTable_name());

                            /* Create an attribute.txt in the table's folder*/
                            AddFile.AddAttribute("src/schemas/" + schema.getName() + "/" + table.getTable_name() + "/attribute.txt", table);
                            
                            /* To test if the attribute.txt has been created*/
                            AddFile.TestPrint("src/schemas/" + schema.getName() + "/" + table.getTable_name() + "/attribute.txt", table);
                            
                            table.printDomain();                       

                        }
                        else if ( pk_count > 1 )
                        {
                            /* If there is already more than one PK Statement, display error */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table cannot contain more than one Primary Key.", "Error", JOptionPane.ERROR_MESSAGE);                                                                   
                        }

                        /* Reset the temporal domain and primary key */
                        domain_temp = new ArrayList<Attribute>();
                        temp_pk = new Attribute();
                        pk_count = 0;

                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_table",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // create_schema ::= CREATE SCHEMA ID 
            {
              Object RESULT =null;
		int schema_idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int schema_idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String schema_id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        Schema schema = new Schema(schema_id.toString());

                        MainWindow.saveSchema(schema);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("create_schema",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operation ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operation ::= select 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operation ::= select SEMICOLON operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation ::= insert_record 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operation ::= insert_record SEMICOLON operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operation ::= create_table 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operation ::= create_table SEMICOLON operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // operation ::= create_schema 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // operation ::= create_schema SEMICOLON operation 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= operation EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

