package kickassdb;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;



parser code
{:              
	public static void main(String args[]) throws Exception 
        {
		//new parser(new Lexer(new FileInputStream(args[0]))).parse();
		new parser(new Lexer(System.in)).parse();                
	}

	public void syntax_error(Symbol s) 
        {
		//report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                //Interfaz.outputArea.append("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"" + "\n");
	}

	public void unrecovered_syntax_error(Symbol s) 
        {                
                KickAssDB.mainwindow.parserResult = "Fatal Sintax Error. Parsing has been stopped.";                
	}
:}

action code
{:
    private static ArrayList<Attribute> domain_temp = new ArrayList<Attribute>();
    
:};

/* Terminals */
terminal CREATE, TABLE, PRIMARY, KEY, INSERT, INTO, VALUES;
terminal String INT, VARCHAR;
terminal String PARLEFT, PARRIGHT, SEMICOLON, COMA;
terminal String ID;
terminal Integer NUM;
terminal STR;

/* No Terminals */
non terminal operation;
non terminal create_table;
non terminal insert_record;
non terminal record_values;
non terminal table_attribute;
non terminal attribute_type;
non terminal coma;
non terminal primary_key;
non terminal attributes;
non terminal attribute_names;

start with operation;

/* Grammar */
operation ::= create_table SEMICOLON operation
               | insert_record SEMICOLON operation
               | create_table
               | insert_record
               |
             ;

insert_record ::= INSERT INTO ID attributes VALUES PARLEFT record_values PARRIGHT
                ; 

    attributes ::= PARLEFT attribute_names PARRIGHT
               |
                    ;

    attribute_names ::= ID COMA attribute_names
                    | ID                    
                    ;         

    record_values ::= NUM COMA record_values
                    | STR COMA record_values
                    | NUM
                    | STR
                    ;

create_table ::= CREATE TABLE ID:id PARLEFT table_attribute PARRIGHT                  
                 {:                        
                        /* Create a new instance of Table */
                        
                        // Get current table count for default schema
                        int table_count = KickAssDB.mainwindow.getDefault_schema().getTable_count();                                                
                        ArrayList<Attribute> temp = new ArrayList<Attribute>();
                        
                        for (int i = domain_temp.size() - 1; i >= 0; i-- )
                        {
                            temp.add(domain_temp.get(i));
                        }

                        domain_temp = temp;
                                                                   
                        Table table = new Table(table_count, id.toString(), domain_temp, 1);
                        table.printTable();

                        // Reset the temporal domain
                        domain_temp = new ArrayList<Attribute>();

                 :};

    table_attribute ::= ID:name attribute_type:type primary_key coma
                        {: 
                               /* Get current Attribute's name */                               
                               Attribute current_attribute = new Attribute(name.toString(), (Attribute.Type)type);

                               domain_temp.add(current_attribute);                               
                        :};

            attribute_type ::= INT 
                               {: 
                                    /* Attribute type is Integer */
                                    RESULT = Attribute.Type.INTEGER;
                               :} |
                               VARCHAR PARLEFT NUM PARRIGHT
                               {: 
                                    /* Attribute's type is Varchar */
                                    RESULT = Attribute.Type.VARCHAR;
                               :};

                coma ::= COMA table_attribute |
                         ;

                    primary_key ::= PRIMARY KEY |
                                    ;