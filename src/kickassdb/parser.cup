package kickassdb;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.util.Collections;

parser code
{:             
     public static void main(String args[]) throws Exception
     {
          //new parser(new Lexer(new FileInputStream(args[0]))).parse();
          new parser(new Lexer(System.in)).parse();               
     }

     public void syntax_error(Symbol s)
     {
         //report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
         MainWindow.ReviewTab.setSelectedIndex(0);
         KickAssDB.mainwindow.parserResult = "Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";         
     }

     public void unrecovered_syntax_error(Symbol s)
     {               
        MainWindow.ReviewTab.setSelectedIndex(0); 
        KickAssDB.mainwindow.parserResult = "Fatal Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";        
     }
:}

action code
{:
    private static final int max_varchar_size = 40;

    private ArrayList<Attribute> domain_temp = new ArrayList<Attribute>();
    private ArrayList<Attribute> primaryKey_temp = new ArrayList<Attribute>();
    private Tuple temp_tuple = new Tuple();
    private Attribute temp_pk = null;
    private int pk_count = 0;
    private ArrayList<String> attName = new ArrayList<String>();
    private ArrayList<String> valType = new ArrayList<String>();
    private int current_attribute_size = 0;
   
    /* SELECT OPERATIONS */
    private ArrayList<String> table_names = new ArrayList<String>();    
    private ArrayList<String> field_names = new ArrayList<String>();
    private ArrayList<String> field_aliases = new ArrayList<String>();
    private ArrayList<QueryFilter> where_filters = new ArrayList<QueryFilter>();


    private void resetGlobals()
    {
        /* This method will reset all the global variables that need to be reset
           when called */

        table_names = new ArrayList<String>();
        field_names = new ArrayList<String>();
        field_aliases = new ArrayList<String>();
        where_filters = new ArrayList<QueryFilter>();
    }

:};

/* Terminals */
terminal CREATE, SCHEMA, TABLE, PRIMARY, KEY, INSERT, INTO, VALUES, NULL, SELECT, FROM, WHERE, AND, OR, COUNT, SUM, AS;
terminal String INT, VARCHAR;
terminal String PARLEFT, PARRIGHT, SEMICOLON, COMA, ASTERISK, OPREL, POINT;
terminal String ID;
terminal NUM;
terminal STR;

/* No Terminals */
non terminal operation;
non terminal create_schema;
non terminal create_table;
non terminal insert_record;
non terminal record_values;
non terminal table_attribute;
non terminal attribute_type;
non terminal coma;
non terminal primary_key;
non terminal attributes;
non terminal attribute_names;
non terminal select, select_tables, select_fields, select_more_fields, where, filter, add_where;

start with operation;

/* Grammar */
operation ::= create_schema SEMICOLON operation
              | create_schema
              | create_table SEMICOLON operation
              | create_table
              | insert_record SEMICOLON operation             
              | insert_record
              | select SEMICOLON operation
              | select
              |
              ;

create_schema ::= CREATE SCHEMA ID:schema_id
                  {:
                        Schema schema = new Schema(schema_id.toString());

                        MainWindow.saveSchema(schema);
                  :}
                  ;

create_table ::= CREATE TABLE ID:id PARLEFT table_attribute PARRIGHT                 
                 {:
                        /* Get the current default schema */
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();

                        /* Get current table count for default schema */
                        int table_count = schema.getTable_count();
                                        
                        /* Check if table name is already taken */
                        if ( table_count > 0 )
                        {
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().equals(id.toString()) )
                                {
                                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + id.toString() + "' Already Exists.", "Error", JOptionPane.ERROR_MESSAGE);                                    
                                    return null; // ???
                                }
                            }
                        }

                        /* If table name does not exist, proceed */
                        ArrayList<Attribute> temp = new ArrayList<Attribute>();
                       
                        /* Instance a new table */
                        Table table = new Table(table_count, id.toString(), domain_temp);
                        domain_temp = new ArrayList<Attribute>();
                        
                        /* If there is primary key, set it */
                        if ( pk_count == 1 || pk_count == 0)
                        {
                            table.setPrimary_key(temp_pk);

                            /* Add table to default schema */
                            schema.addTable(table);

                            table.printDomain();                       

                        }
                        else if ( pk_count > 1 )
                        {
                            /* If there is already more than one PK Statement, display error */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table cannot contain more than one Primary Key.", "Error", JOptionPane.ERROR_MESSAGE);                                                                   
                        }

                        /* Reset the temporal domain and primary key */
                        domain_temp = new ArrayList<Attribute>();
                        temp_pk = new Attribute();
                        pk_count = 0;

                 :};

    table_attribute ::= ID:name attribute_type:type primary_key:pk
                        {:
                               /* Get current Attribute's name */                              
                               Attribute current_attribute = new Attribute(name.toString(), (Attribute.Type)type, current_attribute_size);
                               domain_temp.add(current_attribute);                               

                               /* Check if this attribute is possible primary key */
                               if ( (boolean) pk == true )
                               {
                                   temp_pk = current_attribute; 
                                   //System.out.println("~~~der");
                               }

                               /* Reset attribute size variable */
                               current_attribute_size = 0;
                        :} coma
                        ;

            attribute_type ::= INT
                               {:
                                    /* Attribute type is Integer */
                                    RESULT = Attribute.Type.INTEGER;  
                               :} |
                               VARCHAR PARLEFT NUM:size PARRIGHT
                               {:
                                    /* Attribute's type is Varchar */
                                    RESULT = Attribute.Type.VARCHAR;

                                    /* Get the attribute's size */
                                    /* Check if it doesn't exceed max size */
                                    if ( Integer.parseInt(size.toString()) <= max_varchar_size )
                                    {
                                        current_attribute_size = Integer.parseInt(size.toString());
                                    }
                                    else
                                    {
                                        //JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Varchar type can't exceed a max size of 40.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                    }
                               :};

                coma ::= COMA table_attribute
                         |
                         ;

                    primary_key ::= PRIMARY KEY
                                    {:      
                                        /* Primary Key Production true */                                       
                                        RESULT = true;
                                        pk_count++;
                                    :}
                                    |
                                    {:            
                                        /* Primary Key Production false */                          
                                        RESULT = false;
                                    :}
                                    ;

insert_record ::= INSERT INTO ID:table_name attributes VALUES PARLEFT record_values PARRIGHT
                  {:
                        /* Find the table to insert */                       
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();
                        boolean finished_loop = true;
                       
                        /* Check if any tables exist */
                        if ( schema.getTable_count() > 0 )
                        {
                            /* Look on all tables and search for the table */
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().toLowerCase().equals(table_name.toString().toLowerCase()) )
                                {
                                    /* Table found, validate tuple before inserting */
                                   
                                    /* Obtain a new tuple with correct attribute value ordering */
                                    Tuple new_tuple;
                                    new_tuple = Tuple.setTuple_order(attName, t.getTable_domain(), temp_tuple);

                                    boolean val = true;

                                    val = Validations.validateInsertingTuple(attName, valType, t) && 
                                          Validations.validateColumnSize(temp_tuple) && 
                                          Validations.validateVarcharSize(new_tuple, t.getTable_domain()); 

                                    if ( val && t.getPrimary_key().getAttribute_name() != null ) 
                                        val = Validations.validatePrimaryKey(new_tuple, t);


                                    attName.clear();
                                    valType.clear();

                                    /* Insert tuple into the table */
                                    if(val) 
                                    {
                                        t.addTuple(new_tuple);
                                        t.printTuples();
                                    }

                                    /* Reset the temp tuple */
                                    temp_tuple = new Tuple();

                                    /* Exit from the cycle */
                                    finished_loop = false;
                                    break;
                                }                                                                                                                                   
                            }

                            if ( finished_loop == true )
                            {
                                /* Table Not Found */
                                JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                            }
                         }
                         else
                         {
                            /* Table Not Found */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                         }
                  :}
                  ;

        attributes ::= PARLEFT attribute_names PARRIGHT
                       |
                       ;

            attribute_names ::= ID:id {: attName.add(id); :} COMA attribute_names
                                | ID:id {: attName.add(id); :}
                                ;

                record_values ::= NUM:val
                                  {:                                       
                                        Value v = new Value(val);
                                        try
                                        {
                                            Integer n = Integer.parseInt(val.toString());
                                            temp_tuple.addValue(v);
                                            valType.add("INTEGER");

                                        }
                                        catch(Exception e)
                                        {
                                            System.err.println(e.getMessage());
                                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Integer too large or too small!", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                            
                                        }

                                  :} COMA record_values
                                  | STR:val
                                  {:
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                        valType.add("VARCHAR");
                                  :} COMA record_values
                                  | NUM:val
                                  {:
                                        Value v = new Value(val);
                                        try
                                        {
                                            Integer n = Integer.parseInt(val.toString());
                                            temp_tuple.addValue(v);
                                            valType.add("INTEGER");
                                        }
                                        catch(Exception e)
                                        {
                                            System.err.println(e.getMessage());
                                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Integer too large or too small!", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                        }
                                  :}
                                  | STR:val
                                  {:
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                        valType.add("VARCHAR");
                                  :}
                                  ;


select ::= SELECT select_fields:type FROM select_tables where
           {:                           
                /* Get the current default schema */
                Schema schema = KickAssDB.mainwindow.getDefault_schema();

                /* Validate that the field aliases used DO exist on the schema */
                Collections.reverse(field_aliases);
                boolean aliases_exist = schema.validateAliases(field_aliases);

                if ( aliases_exist == false )
                {
                    /* One or more aliases Do not exist, display error */
                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "One or more aliases specified do not exist.", "Error", JOptionPane.ERROR_MESSAGE);
                    resetGlobals();
                    return null;
                }

                /* Check if there are more than 2 tables in the query */
                if ( table_names.size() > 2 )
                {
                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "FROM statement can only have a maximum of two tables.", "Error", JOptionPane.ERROR_MESSAGE);
                    resetGlobals();
                    return null;
                }

                /* Get Table Objects using the recieved table names in the FROM statement */
                ArrayList<Table> from_tables = new ArrayList<Table>();

                for ( String s : table_names )                
                    if ( schema.getTable(s) != null )
                        from_tables.add(schema.getTable(s));                

                Collections.reverse(from_tables);
                Collections.reverse(field_names);

                /* Check what kind of select statement it is */
                switch ( (int) type ) 
                {
                    case 0:
                        /* SELECT * */
                        Operations.selectAll(from_tables, where_filters);
                        break;

                    case 1:
                        /* SELECT -fields- */
                        Operations.selectFields(field_names, from_tables, where_filters);
                        break;

                    case 2:
                        /* SELECT COUNT (*) */
                        Operations.selectCount(from_tables);
                        break;

                    case 3:
                        /* SELECT SUM() */
                        Operations.selectSum(field_names, from_tables);
                        break;
                }

                /* Reset ArrayLists Names */
                resetGlobals();
                
           :}
           ;

           select_fields ::= ASTERISK 
                             {: 
                                 RESULT = 0; 
                             :}
                             | ID:field_id
                             {:
                                 field_names.add(field_id);
                                 RESULT = 1;
                             :}
                             | ID:field_id COMA select_more_fields 
                             {: 
                                 field_names.add(field_id);
                                 RESULT = 1; 
                             :}
                             | ID:table_alias POINT ID:field_id COMA select_more_fields
                             {:
                                 /* With Alias */
                                 field_names.add(field_id);

                                 /* Add this alias to the list, to validate later */
                                 field_aliases.add(table_alias.toString());

                                 RESULT = 1;
                                 
                             :}
                             | ID:table_alias POINT ID:field_id
                             {:
                                 /* With Alias */
                                 field_names.add(field_id);

                                 /* Add this alias to the list, to validate later */
                                 field_aliases.add(table_alias.toString());

                                 RESULT = 1;
                                 
                             :}
                             | COUNT PARLEFT ASTERISK PARRIGHT 
                             {: 
                                 RESULT = 2; 
                             :}
                             | SUM PARLEFT ID:field_id PARRIGHT 
                             {: 
                                 field_names.add(field_id);
                                 RESULT = 3; 
                             :}
                             ;
                             
                             select_more_fields ::= ID:field_id COMA select_more_fields
                                                    {:
                                                        field_names.add(field_id);
                                                    :}
                                                    | ID:field_id
                                                    {:
                                                        field_names.add(field_id);
                                                    :}
                                                    | ID:table_alias POINT ID:field_id COMA select_more_fields
                                                    {:
                                                        field_names.add(field_id);
                                                        field_aliases.add(table_alias);
                                                    :}
                                                    | ID:table_alias POINT ID:field_id
                                                    {:
                                                        field_names.add(field_id);
                                                        field_aliases.add(table_alias);
                                                    :}
                                                    ;

           select_tables ::= ID:table_name COMA select_tables
                             {:
                                 table_names.add(table_name.toString());
                             :}
                             | ID:table_name
                             {:
                                 table_names.add(table_name.toString());
                             :}
                             | ID:table_name AS ID:alias_name COMA select_tables
                             {:
                                 /* With Alias */
                                 table_names.add(table_name.toString());

                                 /* Add this alias to the table specified in the query */
                                 Schema df_schema = MainWindow.getDefaultSchema();  // Get current Schema
                                 Table query_table = df_schema.getTable(table_name.toString()); // Get Table Object
                                 query_table.setTable_alias(alias_name.toString()); // Set this alias to this table                                 
                             :}                                                          
                             | ID:table_name AS ID:alias_name
                             {:
                                 /* With Alias */
                                 table_names.add(table_name.toString());

                                 /* Add this alias to the table specified in the query */
                                 Schema df_schema = MainWindow.getDefaultSchema();  // Get current Schema
                                 Table query_table = df_schema.getTable(table_name.toString()); // Get Table Object
                                 query_table.setTable_alias(alias_name.toString()); // Set this alias to this table
                             :}
                             ;

           where ::= WHERE ID:field_id OPREL:operand filter:fv add_where
                     {:
                        /* Create a new Filter Object */
                        QueryFilter qf = new QueryFilter(field_id.toString(), operand.toString(), fv, null);

                        /* Add it to the list of filters for this query */
                        where_filters.add(qf);
                     :}
                     |
                     ;

                     filter ::= STR:value
                                {:
                                    RESULT = value;
                                :}
                                | NUM:value
                                {:
                                    RESULT = value;
                                :}
                                ;

                                add_where ::= AND ID:field_id OPREL:operand filter:fv add_where
                                              {:
                                                  /* Create a new Filter Object */
                                                  QueryFilter qf = new QueryFilter(field_id.toString(), operand.toString(), fv, "AND");

                                                  /* Add it to the list of filters for this query */
                                                  where_filters.add(qf);
                                              :}
                                              | OR ID:field_id OPREL:operand filter:fv add_where
                                              {:
                                                  /* Create a new Filter Object */
                                                  QueryFilter qf = new QueryFilter(field_id.toString(), operand.toString(), fv, "OR");

                                                  /* Add it to the list of filters for this query */
                                                  where_filters.add(qf);
                                              :}
                                              |
                                              ;