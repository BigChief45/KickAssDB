package kickassdb;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;



parser code
{:              
	public static void main(String args[]) throws Exception 
        {
		//new parser(new Lexer(new FileInputStream(args[0]))).parse();
		new parser(new Lexer(System.in)).parse();                
	}

	public void syntax_error(Symbol s) 
        {
		//report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                KickAssDB.mainwindow.parserResult = "Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";
	}

	public void unrecovered_syntax_error(Symbol s) 
        {                
                KickAssDB.mainwindow.parserResult = "Fatal Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";                
	}
:}

action code
{:
    private static ArrayList<Attribute> domain_temp = new ArrayList<Attribute>();
    private static ArrayList<Attribute> primaryKey_temp = new ArrayList<Attribute>();
    private static Tuple temp_tuple = new Tuple();
    private static Attribute temp_pk = null;
    private static int pk_count = 0;
    
:};

/* Terminals */
terminal CREATE, TABLE, PRIMARY, KEY, INSERT, INTO, VALUES;
terminal String INT, VARCHAR;
terminal String PARLEFT, PARRIGHT, SEMICOLON, COMA;
terminal String ID;
terminal NUM;
terminal STR;

/* No Terminals */
non terminal operation;
non terminal create_table;
non terminal insert_record;
non terminal record_values;
non terminal table_attribute;
non terminal attribute_type;
non terminal coma;
non terminal primary_key;
non terminal attributes;
non terminal attribute_names;

start with operation;

/* Grammar */
operation ::= create_table SEMICOLON operation
              | insert_record SEMICOLON operation
              | create_table
              | insert_record
              |
              ;


create_table ::= CREATE TABLE ID:id PARLEFT table_attribute PARRIGHT                  
                 {:                                                
                        /* Get the current default schema */
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();

                        /* Get current table count for default schema */
                        int table_count = schema.getTable_count();

                        /* Check if table name is already taken */
                        if ( table_count > 0 )
                        {
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().equals(id.toString()) )
                                {
                                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + id.toString() + "' Already Exists.", "Error", JOptionPane.ERROR_MESSAGE);
                                    return null; // ???
                                }
                            }
                        }

                        /* If table name does not exist, proceed */
                        ArrayList<Attribute> temp = new ArrayList<Attribute>();
                        
                        /* Invert the arraylist elements */
                        for (int i = domain_temp.size() - 1; i >= 0; i-- )
                        {
                            temp.add(domain_temp.get(i));
                        }

                        domain_temp = temp;
                                        
                        /* Instance a new table */
                        Table table = new Table(table_count, id.toString(), domain_temp);

                        /* If there is primary key, set it */
                        if ( pk_count == 1 )
                        {
                            table.setPrimary_key(temp_pk);

                            /* Add table to default schema */
                            schema.addTable(table);

                            table.printDomain();                        

                            /* Reset the temporal domain and primary key */
                            domain_temp = new ArrayList<Attribute>();
                            temp_pk = new Attribute();
                            pk_count = 0;
                        }
                        else if ( pk_count > 1 )
                        {
                            /* If there is already more than one PK Statement, display error */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table cannot contain more than one Primary Key.", "Error", JOptionPane.ERROR_MESSAGE);                                                                    
                        }
                 :};

    table_attribute ::= ID:name attribute_type:type primary_key:pk
                        {: 
                               /* Get current Attribute's name */                               
                               Attribute current_attribute = new Attribute(name.toString(), (Attribute.Type)type);
                               domain_temp.add(current_attribute);

                               /* Check if this attribute is possible primary key */
                               if ( (boolean) pk == true )
                               {
                                   temp_pk = current_attribute;  
                               }
                        :} coma
                        ;

            attribute_type ::= INT 
                               {: 
                                    /* Attribute type is Integer */
                                    RESULT = Attribute.Type.INTEGER;
                               :} |
                               VARCHAR PARLEFT NUM PARRIGHT
                               {: 
                                    /* Attribute's type is Varchar */
                                    RESULT = Attribute.Type.VARCHAR;
                               :};

                coma ::= COMA table_attribute 
                         |
                         ;

                    primary_key ::= PRIMARY KEY
                                    {:       
                                        /* Primary Key Production true */                                        
                                        RESULT = true;
                                        pk_count++;
                                    :}
                                    |
                                    {:             
                                        /* Primary Key Production false */                           
                                        RESULT = false;
                                    :}
                                    ;

insert_record ::= INSERT INTO ID:table_name attributes VALUES PARLEFT record_values PARRIGHT
                  {: 
                        /* Find the table to insert */                        
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();
                        boolean finished_loop = true;
                        
                        /* Check if any tables exist */
                        if ( schema.getTable_count() > 0 )
                        {
                            /* Look on all tables and search for the table */
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().toLowerCase().equals(table_name.toString().toLowerCase()) )
                                {
                                    /* Table found, validate tuple before inserting */
                                    boolean val;
                                    val = Validations.validateInsertingTuple(temp_tuple, t.getTable_domain());
                                    
                                    /* Insert tuple into the table */
                                    t.addTuple(temp_tuple);

                                    t.printTuples();

                                    /* Reset the temp tuple */
                                    temp_tuple = new Tuple();

                                    /* Exit from the cycle */
                                    finished_loop = false;
                                    break;
                                }                                                                                                                                    
                            }

                            if ( finished_loop == true )
                            {
                                /* Table Not Found */
                                JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                          
                            }
                         }
                         else
                         {
                            /* Table Not Found */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                          
                         }
                  :}
                  ;

        attributes ::= PARLEFT attribute_names PARRIGHT
                       |
                       ;

            attribute_names ::= ID COMA attribute_names
                                | ID                    
                                ;

                record_values ::= NUM:val
                                  {:                                        
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);                                        
                                  :} COMA record_values
                                  | STR:val
                                  {:
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                  :} COMA record_values
                                  | NUM:val
                                  {:
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                  :}
                                  | STR:val
                                  {:
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                  :}
                                  ;
