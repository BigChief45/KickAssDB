package kickassdb;

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;



parser code
{:             
     public static void main(String args[]) throws Exception
        {
          //new parser(new Lexer(new FileInputStream(args[0]))).parse();
          new parser(new Lexer(System.in)).parse();               
     }

     public void syntax_error(Symbol s)
        {
          //report_error("Error de sintaxis. Linea: " + (s.right + 1) + " Columna: " + s.left + ". Texto: \"" + s.value + "\"", null);
                KickAssDB.mainwindow.parserResult = "Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";
     }

     public void unrecovered_syntax_error(Symbol s)
        {               
                KickAssDB.mainwindow.parserResult = "Fatal Syntax Error. Line: " + (s.right + 1) + " Column: " + s.left + ". Text: \"" + s.value + "\"" + "\n";               
     }
:}

action code
{:
    private static final int max_varchar_size = 40;

    private static ArrayList<Attribute> domain_temp = new ArrayList<Attribute>();
    private static ArrayList<Attribute> primaryKey_temp = new ArrayList<Attribute>();
    private static Tuple temp_tuple = new Tuple();
    private static Attribute temp_pk = null;
    private static int pk_count = 0;
    private static ArrayList<String> attName = new ArrayList<String>();
    private static ArrayList<String> valType = new ArrayList<String>();
    private static int current_attribute_size = 0;
   
:};

/* Terminals */
terminal CREATE, TABLE, PRIMARY, KEY, INSERT, INTO, VALUES, NULL, SELECT, FROM, WHERE, AND, OR;
terminal String INT, VARCHAR;
terminal String PARLEFT, PARRIGHT, SEMICOLON, COMA, ASTERISK, OPREL;
terminal String ID;
terminal NUM;
terminal STR;

/* No Terminals */
non terminal operation;
non terminal create_table;
non terminal insert_record;
non terminal record_values;
non terminal table_attribute;
non terminal attribute_type;
non terminal coma;
non terminal primary_key;
non terminal attributes;
non terminal attribute_names;
non terminal select, select_tables, select_fields, select_more_fields, where, filter, add_where;

start with operation;

/* Grammar */
operation ::= create_table SEMICOLON operation
              | create_table
              | insert_record SEMICOLON operation             
              | insert_record
              | select SEMICOLON operation
              | select
              |
              ;


create_table ::= CREATE TABLE ID:id PARLEFT table_attribute PARRIGHT                 
                 {:
                        /* Get the current default schema */
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();

                        /* Get current table count for default schema */
                        int table_count = schema.getTable_count();
                                        
                        /* Check if table name is already taken */
                        if ( table_count > 0 )
                        {
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().equals(id.toString()) )
                                {
                                    JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + id.toString() + "' Already Exists.", "Error", JOptionPane.ERROR_MESSAGE);                                    
                                    return null; // ???
                                }
                            }
                        }

                        /* If table name does not exist, proceed */
                        ArrayList<Attribute> temp = new ArrayList<Attribute>();
                       
                        /* Instance a new table */
                        Table table = new Table(table_count, id.toString(), domain_temp);
                        domain_temp = new ArrayList<Attribute>();
                        
                        /* If there is primary key, set it */
                        if ( pk_count == 1 || pk_count == 0)
                        {
                            table.setPrimary_key(temp_pk);

                            /* Add table to default schema */
                            schema.addTable(table);

                            table.printDomain();                       

                        }
                        else if ( pk_count > 1 )
                        {
                            /* If there is already more than one PK Statement, display error */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table cannot contain more than one Primary Key.", "Error", JOptionPane.ERROR_MESSAGE);                                                                   
                        }

                        /* Reset the temporal domain and primary key */
                        domain_temp = new ArrayList<Attribute>();
                        temp_pk = new Attribute();
                        pk_count = 0;

                 :};

    table_attribute ::= ID:name attribute_type:type primary_key:pk
                        {:
                               /* Get current Attribute's name */                              
                               Attribute current_attribute = new Attribute(name.toString(), (Attribute.Type)type, current_attribute_size);
                               domain_temp.add(current_attribute);                               

                               /* Check if this attribute is possible primary key */
                               if ( (boolean) pk == true )
                               {
                                   temp_pk = current_attribute; 
                                   //System.out.println("~~~der");
                               }

                               /* Reset attribute size variable */
                               current_attribute_size = 0;
                        :} coma
                        ;

            attribute_type ::= INT
                               {:
                                    /* Attribute type is Integer */
                                    RESULT = Attribute.Type.INTEGER;  
                               :} |
                               VARCHAR PARLEFT NUM:size PARRIGHT
                               {:
                                    /* Attribute's type is Varchar */
                                    RESULT = Attribute.Type.VARCHAR;

                                    /* Get the attribute's size */
                                    /* Check if it doesn't exceed max size */
                                    if ( Integer.parseInt(size.toString()) <= max_varchar_size )
                                    {
                                        current_attribute_size = Integer.parseInt(size.toString());
                                    }
                                    else
                                    {
                                        //JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Varchar type can't exceed a max size of 40.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                    }
                               :};

                coma ::= COMA table_attribute
                         |
                         ;

                    primary_key ::= PRIMARY KEY
                                    {:      
                                        /* Primary Key Production true */                                       
                                        RESULT = true;
                                        pk_count++;
                                    :}
                                    |
                                    {:            
                                        /* Primary Key Production false */                          
                                        RESULT = false;
                                    :}
                                    ;

insert_record ::= INSERT INTO ID:table_name attributes VALUES PARLEFT record_values PARRIGHT
                  {:
                        /* Find the table to insert */                       
                        Schema schema = KickAssDB.mainwindow.getDefault_schema();
                        boolean finished_loop = true;
                       
                        /* Check if any tables exist */
                        if ( schema.getTable_count() > 0 )
                        {
                            /* Look on all tables and search for the table */
                            for ( Table t : schema.getSchema() )
                            {
                                if ( t.getTable_name().toLowerCase().equals(table_name.toString().toLowerCase()) )
                                {
                                    /* Table found, validate tuple before inserting */
                                   
                                    /* Obtain a new tuple with correct attribute value ordering */
                                    Tuple new_tuple;
                                    new_tuple = Tuple.setTuple_order(attName, t.getTable_domain(), temp_tuple);

                                    boolean val = true;

                                    val = Validations.validateInsertingTuple(attName, valType, t) && 
                                          Validations.validateColumnSize(temp_tuple) && 
                                          Validations.validateVarcharSize(new_tuple, t.getTable_domain()); 

                                    if ( val && t.getPrimary_key().getAttribute_name() != null ) 
                                        val = Validations.validatePrimaryKey(new_tuple, t);


                                    attName.clear();
                                    valType.clear();

                                    /* Insert tuple into the table */
                                    if(val) 
                                    {
                                        t.addTuple(new_tuple);
                                        t.printTuples();
                                    }

                                    /* Reset the temp tuple */
                                    temp_tuple = new Tuple();

                                    /* Exit from the cycle */
                                    finished_loop = false;
                                    break;
                                }                                                                                                                                   
                            }

                            if ( finished_loop == true )
                            {
                                /* Table Not Found */
                                JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                            }
                         }
                         else
                         {
                            /* Table Not Found */
                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Table '" + table_name.toString() + "' does not exist. Record was not inserted.", "Error", JOptionPane.ERROR_MESSAGE);                                         
                         }
                  :}
                  ;

        attributes ::= PARLEFT attribute_names PARRIGHT
                       |
                       ;

            attribute_names ::= ID:id {: attName.add(id); :} COMA attribute_names
                                | ID:id {: attName.add(id); :}
                                ;

                record_values ::= NUM:val
                                  {:                                       
                                        Value v = new Value(val);
                                        try
                                        {
                                            Integer n = Integer.parseInt(val.toString());
                                            temp_tuple.addValue(v);
                                            valType.add("INTEGER");

                                        }
                                        catch(Exception e)
                                        {
                                            System.err.println(e.getMessage());
                                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Integer too large or too small!", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                            
                                        }

                                  :} COMA record_values
                                  | STR:val
                                  {:
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                        valType.add("VARCHAR");
                                  :} COMA record_values
                                  | NUM:val
                                  {:
                                        Value v = new Value(val);
                                        try
                                        {
                                            Integer n = Integer.parseInt(val.toString());
                                            temp_tuple.addValue(v);
                                            valType.add("INTEGER");
                                        }
                                        catch(Exception e)
                                        {
                                            System.err.println(e.getMessage());
                                            JOptionPane.showMessageDialog(KickAssDB.mainwindow, "Integer too large or too small!", "Error", JOptionPane.ERROR_MESSAGE);                                         
                                        }
                                  :}
                                  | STR:val
                                  {:
                                        Value v = new Value(val);
                                        temp_tuple.addValue(v);
                                        valType.add("VARCHAR");
                                  :}
                                  ;


select ::= SELECT select_fields FROM select_tables where           
           ;

           select_fields ::= ASTERISK
                             | ID:table_id
                             | ID COMA select_more_fields
                             ;
                             
                             select_more_fields ::= ID:table_id COMA select_more_fields
                                                    | ID:table_id
                                                    ;

           select_tables ::= ID:table_id COMA select_tables
                             | ID
                             ;

           where ::= WHERE ID OPREL filter add_where
                     |
                     ;

                     filter ::= STR
                                | NUM
                                ;

                                add_where ::= AND ID OPREL filter add_where
                                              | OR ID OPREL filter add_where
                                              |
                                              ;